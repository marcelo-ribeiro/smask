{"version":3,"file":"index.es.js","sources":["../src/number.ts","../src/currency/currency-map.ts","../src/currency/index.ts","../src/date.ts","../src/tokens.ts","../src/unmask.ts","../src/mask.ts","../src/unmaskNumber.ts","../src/input.ts","../src/prepareMaskInputs.ts"],"sourcesContent":["/**\n * Get a locale number\n */\nexport const numberFormat = (\n  value: number,\n  locale: string = navigator.language,\n  style = \"decimal\",\n  options?: Intl.NumberFormatOptions\n): string => {\n  options = { style, ...options };\n  return new Intl.NumberFormat(locale, options).format(value);\n};\n","// www.npmjs.com/package/locale-currency\nexport const currencyLocale: {\n  [key: string]: string;\n} = {\n  AD: \"EUR\",\n  AE: \"AED\",\n  AF: \"AFN\",\n  AG: \"XCD\",\n  AI: \"XCD\",\n  AL: \"ALL\",\n  AM: \"AMD\",\n  AO: \"AOA\",\n  AR: \"ARS\",\n  AS: \"USD\",\n  AT: \"EUR\",\n  AU: \"AUD\",\n  AW: \"AWG\",\n  AX: \"EUR\",\n  AZ: \"AZN\",\n  BA: \"BAM\",\n  BB: \"BBD\",\n  BD: \"BDT\",\n  BE: \"EUR\",\n  BF: \"XOF\",\n  BG: \"BGN\",\n  BH: \"BHD\",\n  BI: \"BIF\",\n  BJ: \"XOF\",\n  BL: \"EUR\",\n  BM: \"BMD\",\n  BN: \"BND\",\n  BO: \"BOB\",\n  BQ: \"USD\",\n  BR: \"BRL\",\n  BS: \"BSD\",\n  BT: \"BTN\",\n  BV: \"NOK\",\n  BW: \"BWP\",\n  BY: \"BYN\",\n  BZ: \"BZD\",\n  CA: \"CAD\",\n  CC: \"AUD\",\n  CD: \"CDF\",\n  CF: \"XAF\",\n  CG: \"XAF\",\n  CH: \"CHF\",\n  CI: \"XOF\",\n  CK: \"NZD\",\n  CL: \"CLP\",\n  CM: \"XAF\",\n  CN: \"CNY\",\n  CO: \"COP\",\n  CR: \"CRC\",\n  CU: \"CUP\",\n  CV: \"CVE\",\n  CW: \"ANG\",\n  CX: \"AUD\",\n  CY: \"EUR\",\n  CZ: \"CZK\",\n  DE: \"EUR\",\n  DJ: \"DJF\",\n  DK: \"DKK\",\n  DM: \"XCD\",\n  DO: \"DOP\",\n  DZ: \"DZD\",\n  EC: \"USD\",\n  EE: \"EUR\",\n  EG: \"EGP\",\n  EH: \"MAD\",\n  ER: \"ERN\",\n  ES: \"EUR\",\n  ET: \"ETB\",\n  FI: \"EUR\",\n  FJ: \"FJD\",\n  FK: \"FKP\",\n  FM: \"USD\",\n  FO: \"DKK\",\n  FR: \"EUR\",\n  GA: \"XAF\",\n  GB: \"GBP\",\n  GD: \"XCD\",\n  GE: \"GEL\",\n  GF: \"EUR\",\n  GG: \"GBP\",\n  GH: \"GHS\",\n  GI: \"GIP\",\n  GL: \"DKK\",\n  GM: \"GMD\",\n  GN: \"GNF\",\n  GP: \"EUR\",\n  GQ: \"XAF\",\n  GR: \"EUR\",\n  GS: \"GBP\",\n  GT: \"GTQ\",\n  GU: \"USD\",\n  GW: \"XOF\",\n  GY: \"GYD\",\n  HK: \"HKD\",\n  HM: \"AUD\",\n  HN: \"HNL\",\n  HR: \"HRK\",\n  HT: \"HTG\",\n  HU: \"HUF\",\n  ID: \"IDR\",\n  IE: \"EUR\",\n  IL: \"ILS\",\n  IM: \"GBP\",\n  IN: \"INR\",\n  IO: \"USD\",\n  IQ: \"IQD\",\n  IR: \"IRR\",\n  IS: \"ISK\",\n  IT: \"EUR\",\n  JE: \"GBP\",\n  JM: \"JMD\",\n  JO: \"JOD\",\n  JP: \"JPY\",\n  KE: \"KES\",\n  KG: \"KGS\",\n  KH: \"KHR\",\n  KI: \"AUD\",\n  KM: \"KMF\",\n  KN: \"XCD\",\n  KP: \"KPW\",\n  KR: \"KRW\",\n  KW: \"KWD\",\n  KY: \"KYD\",\n  KZ: \"KZT\",\n  LA: \"LAK\",\n  LB: \"LBP\",\n  LC: \"XCD\",\n  LI: \"CHF\",\n  LK: \"LKR\",\n  LR: \"LRD\",\n  LS: \"LSL\",\n  LT: \"EUR\",\n  LU: \"EUR\",\n  LV: \"EUR\",\n  LY: \"LYD\",\n  MA: \"MAD\",\n  MC: \"EUR\",\n  MD: \"MDL\",\n  ME: \"EUR\",\n  MF: \"EUR\",\n  MG: \"MGA\",\n  MH: \"USD\",\n  MK: \"MKD\",\n  ML: \"XOF\",\n  MM: \"MMK\",\n  MN: \"MNT\",\n  MO: \"MOP\",\n  MP: \"USD\",\n  MQ: \"EUR\",\n  MR: \"MRO\",\n  MS: \"XCD\",\n  MT: \"EUR\",\n  MU: \"MUR\",\n  MV: \"MVR\",\n  MW: \"MWK\",\n  MX: \"MXN\",\n  MY: \"MYR\",\n  MZ: \"MZN\",\n  NA: \"NAD\",\n  NC: \"XPF\",\n  NE: \"XOF\",\n  NF: \"AUD\",\n  NG: \"NGN\",\n  NI: \"NIO\",\n  NL: \"EUR\",\n  NO: \"NOK\",\n  NP: \"NPR\",\n  NR: \"AUD\",\n  NU: \"NZD\",\n  NZ: \"NZD\",\n  OM: \"OMR\",\n  PA: \"PAB\",\n  PE: \"PEN\",\n  PF: \"XPF\",\n  PG: \"PGK\",\n  PH: \"PHP\",\n  PK: \"PKR\",\n  PL: \"PLN\",\n  PM: \"EUR\",\n  PN: \"NZD\",\n  PR: \"USD\",\n  PS: \"ILS\",\n  PT: \"EUR\",\n  PW: \"USD\",\n  PY: \"PYG\",\n  QA: \"QAR\",\n  RE: \"EUR\",\n  RO: \"RON\",\n  RS: \"RSD\",\n  RU: \"RUB\",\n  RW: \"RWF\",\n  SA: \"SAR\",\n  SB: \"SBD\",\n  SC: \"SCR\",\n  SD: \"SDG\",\n  SE: \"SEK\",\n  SG: \"SGD\",\n  SH: \"SHP\",\n  SI: \"EUR\",\n  SJ: \"NOK\",\n  SK: \"EUR\",\n  SL: \"SLL\",\n  SM: \"EUR\",\n  SN: \"XOF\",\n  SO: \"SOS\",\n  SR: \"SRD\",\n  ST: \"STD\",\n  SV: \"SVC\",\n  SX: \"ANG\",\n  SY: \"SYP\",\n  SZ: \"SZL\",\n  TC: \"USD\",\n  TD: \"XAF\",\n  TF: \"EUR\",\n  TG: \"XOF\",\n  TH: \"THB\",\n  TJ: \"TJS\",\n  TK: \"NZD\",\n  TL: \"USD\",\n  TM: \"TMT\",\n  TN: \"TND\",\n  TO: \"TOP\",\n  TR: \"TRY\",\n  TT: \"TTD\",\n  TV: \"AUD\",\n  TW: \"TWD\",\n  TZ: \"TZS\",\n  UA: \"UAH\",\n  UG: \"UGX\",\n  UM: \"USD\",\n  US: \"USD\",\n  UY: \"UYU\",\n  UZ: \"UZS\",\n  VA: \"EUR\",\n  VC: \"XCD\",\n  VE: \"VEF\",\n  VG: \"USD\",\n  VI: \"USD\",\n  VN: \"VND\",\n  VU: \"VUV\",\n  WF: \"XPF\",\n  WS: \"WST\",\n  YE: \"YER\",\n  YT: \"EUR\",\n  ZA: \"ZAR\",\n  ZM: \"ZMW\",\n  ZW: \"ZWL\",\n};\n","import { numberFormat } from \"../number\";\nimport { currencyLocale } from \"./currency-map\";\n\nexport const currencyFormat = (\n  value: number,\n  locale: string = navigator.language,\n  currency: Intl.NumberFormatOptions[\"currency\"] = currencyLocale[\n    locale.slice(-2).toLocaleUpperCase()\n  ]\n): string => {\n  return numberFormat(value, locale, \"currency\", { currency });\n};\n","const referenceDateDigits = \"01/01/1970\".replace(/\\D/g, \"\");\n\nexport const getComputedDate = (value: string): string => {\n  const valueDigits = value.replace(/\\D/g, \"\");\n  const computedDate =\n    valueDigits + referenceDateDigits.slice(valueDigits.length);\n  return computedDate;\n};\n\nconst getDateParts = (\n  locales?: string | string[] | undefined\n): Intl.DateTimeFormatPart[] => {\n  return new Intl.DateTimeFormat(locales).formatToParts();\n};\n\nexport const isValidDate = (date: Date): boolean => {\n  return date instanceof Date && !isNaN(date.valueOf());\n};\n\n/**\n * Get locale date pattern\n */\nexport const getDatePattern = (locale?: string): string => {\n  let pattern = \"\";\n  const dateParts = getDateParts(locale);\n  dateParts.forEach(({ type, value }) => {\n    if (type === \"month\" || type === \"day\") pattern += \"dd\";\n    else if (type === \"year\") pattern += \"dddd\";\n    else if (type === \"literal\") pattern += value;\n  });\n  return pattern;\n};\n\n/**\n * Convert locale date string to Date object\n */\nexport const date = (date: string, locale?: string): Date => {\n  const dateParts = getDateParts(locale);\n  const splitChar: string = dateParts.find(({ type }) => type === \"literal\")\n    ?.value!;\n  const dateArray = date.split(splitChar);\n  const { month, day, year }: { [x: string]: string } = {\n    [dateParts[0].type]: dateArray[0],\n    [dateParts[2].type]: dateArray[1],\n    [dateParts[4].type]: dateArray[2],\n  };\n  const dateFormat = `${month}/${day}/${year}`;\n  return new Date(dateFormat);\n};\n\n/**\n * Convert Date object to locale string\n */\nexport const dateTimeFormat = (\n  value: Date,\n  locale = navigator.language,\n  options?: Intl.DateTimeFormatOptions\n): string => {\n  return new Intl.DateTimeFormat(locale, options).format(value);\n};\n\n/**\n * Convert Datetime string to locale dateTime string\n */\nexport const localeDateTime = (\n  value: string,\n  locale: string = navigator.language,\n  options?: Intl.DateTimeFormatOptions\n): string => {\n  if (!value) return value;\n  const date = new Date(value);\n  if (!isValidDate(date)) return value;\n  const localeDateString = dateTimeFormat(date, locale, {\n    dateStyle: \"short\",\n    timeStyle: \"short\",\n    ...options,\n  });\n  return localeDateString;\n};\n\n/**\n * Convert Datetime string to locale date string\n */\nexport const localeDate = (\n  value: string,\n  locale: string = navigator.language,\n  options?: Intl.DateTimeFormatOptions\n): string => {\n  if (!value) return value;\n  const date = new Date(value);\n  if (!isValidDate(date)) return value;\n  const localeDateString = dateTimeFormat(date, locale, {\n    dateStyle: \"short\",\n    ...options,\n  });\n  return localeDateString;\n};\n\n/**\n * Convert Datetime string to locale dateTime string\n */\nexport const localeTime = (\n  value: string,\n  locale: string = navigator.language,\n  options?: Intl.DateTimeFormatOptions\n): string => {\n  if (!value) return value;\n  const date = new Date(value);\n  if (!isValidDate(date)) return value;\n  const localeDateString = dateTimeFormat(date, locale, {\n    timeStyle: \"short\",\n    ...options,\n  });\n  return localeDateString;\n};\n\n/**\n * Unmask locale Datetime string to Datetime ISO string\n */\nexport const unmaskDate = (\n  value: string,\n  locale: string = navigator.language\n): string => {\n  const dateObject = date(value, locale);\n  if (!isValidDate(dateObject)) return \"\";\n  return dateObject.toISOString();\n};\n","export const tokens: {\n  [key: string]: {\n    test: (input: string) => boolean;\n    transform: (input: string) => string;\n  };\n} = {\n  d: { test: (v) => /\\d/.test(v), transform: (v) => v },\n  a: {\n    test: (v) => /[a-z]/i.test(v),\n    transform: (v) => v.toLowerCase(),\n  },\n  A: {\n    test: (v) => /[a-z]/i.test(v),\n    transform: (v) => v.toUpperCase(),\n  },\n  w: {\n    test: (v) => /\\w/.test(v),\n    transform: (v) => v.toLowerCase(),\n  },\n  W: {\n    test: (v) => /\\w/.test(v),\n    transform: (v) => v.toUpperCase(),\n  },\n};\n","/**\n * Remove mask pattern\n */\nexport const unmask = (value: string, pattern?: string): string => {\n  if (!value) return value;\n  value = value.replace(/\\W/gi, \"\");\n  return !!pattern ? value.slice(0, pattern.replace(/\\W/gi, \"\").length) : value;\n};\n","import { tokens } from \"./tokens\";\nimport { unmask } from \"./unmask\";\n\nexport const mask = (value: string, patterns: string[]): string => {\n  if (!value) return \"\";\n  if (!patterns) throw ReferenceError(\"Value or pattern not found.\");\n  if (!Array.isArray(patterns))\n    throw ReferenceError(\"Pattern should be an array\");\n\n  patterns.sort((a, b) => a.length - b.length);\n\n  let computedPattern = \"\";\n  const valueLength = unmask(value).length;\n\n  for (let i = 0; i < patterns.length; i++) {\n    const pattern = patterns[i];\n    if (valueLength <= unmask(pattern).length) {\n      computedPattern = pattern;\n      break;\n    }\n  }\n\n  let output = \"\";\n\n  for (\n    let unmaskedValue = unmask(value, computedPattern),\n      unmaskedPattern = unmask(computedPattern),\n      patternLength = computedPattern.length,\n      i = 0,\n      ii = 0;\n    i < patternLength && unmaskedValue[ii];\n    i++\n  ) {\n    const token = tokens[unmaskedPattern[ii]],\n      patternChar = computedPattern[i],\n      inputChar = unmaskedValue[ii];\n\n    if (!token.test(inputChar)) break;\n    else if (/\\W/.test(patternChar)) output += patternChar;\n    else (output += token.transform(inputChar)), ii++;\n  }\n\n  return output;\n};\n","import { currencyLocale } from \"./currency/currency-map\";\n\n/**\n * Remove non-numeric characters from a string\n */\nexport const unmaskNumber = (value: string): number => {\n  const digits = value.replace(/\\D/g, \"\");\n  let output = 0;\n  output = parseFloat(digits);\n  return output;\n};\n\n/**\n * Reverse Number Format\n */\nexport const numberUnformat = (value: string, locale?: string): number => {\n  const parts = new Intl.NumberFormat(locale).formatToParts(1111.1);\n  return reverseFormat(value, parts);\n};\n\n/**\n * Reverse Currency Format\n */\nexport const currencyUnformat = (\n  value: string,\n  locale: string = navigator.language,\n  currency: Intl.NumberFormatOptions[\"currency\"] = currencyLocale[\n    locale.slice(-2)\n  ]\n): number => {\n  const parts = new Intl.NumberFormat(locale, {\n    style: \"currency\",\n    currency,\n  }).formatToParts(1111.1);\n  const currencySymbol = parts.find(({ type }) => type === \"currency\")?.value;\n  const reversedValue = !!currencySymbol\n    ? value.replace(currencySymbol, \"\")\n    : value;\n  const output = reverseFormat(reversedValue, parts);\n  return output;\n};\n\n/**\n * Number reverse format\n */\nconst reverseFormat = (\n  value: string,\n  parts: Intl.NumberFormatPart[]\n): number => {\n  const group = parts.find((part) => part.type === \"group\")?.value;\n  const decimal = parts.find((part) => part.type === \"decimal\")?.value;\n  if (group) value = value.replace(group, \"\");\n  if (decimal) value = value.replace(decimal, \".\");\n  return Number.isNaN(value) ? NaN : parseFloat(value);\n};\n","import { currencyFormat } from \"./currency\";\nimport { date, getComputedDate, getDatePattern, isValidDate } from \"./date\";\nimport { mask } from \"./mask\";\nimport { numberFormat } from \"./number\";\nimport { unmaskNumber } from \"./unmaskNumber\";\n\n/**\n * Set locale number mask on input\n */\nexport const inputNumber = (value: string) => {\n  const unmaskedNumber = unmaskNumber(value);\n  return isNaN(unmaskedNumber) ? \"\" : numberFormat(unmaskedNumber);\n};\n\n/**\n * Set locale currency mask on input\n */\nexport const inputCurrency = (value: string) => {\n  const unmaskedNumber = unmaskNumber(value) / 100;\n  return isNaN(unmaskedNumber) ? \"\" : currencyFormat(unmaskedNumber);\n};\n\n/**\n * Set locale date mask on input\n */\nexport const inputDate = (\n  value: string,\n  locale: string = navigator.language\n): string => {\n  if (!value) return value;\n  const pattern = getDatePattern();\n  const computedDate = getComputedDate(value);\n  const maskedDate = mask(computedDate, [pattern]);\n  const dateObject = date(maskedDate, locale);\n  if (!isValidDate(dateObject)) throw new Error(\"Invalid date\");\n  return mask(value, [pattern]);\n};\n\nexport const input = (\n  element: HTMLInputElement,\n  patterns: string[]\n): (() => void) => {\n  if (!element || typeof element !== \"object\") {\n    throw Error(\"Element not found.\");\n  }\n  if (!patterns) {\n    throw ReferenceError(\"Pattern should be an array\");\n  }\n  if (!Array.isArray(patterns)) {\n    throw ReferenceError(\"Pattern should be an array\");\n  }\n\n  const [pattern] = patterns.sort((a, b) => a.length - b.length);\n\n  let listener: () => void;\n\n  switch (pattern) {\n    case \"currency\": {\n      element.placeholder = currencyFormat(0);\n      listener = () => {\n        element.value = inputCurrency(element.value);\n      };\n      break;\n    }\n    case \"number\": {\n      listener = () => {\n        element.value = inputNumber(element.value);\n      };\n      break;\n    }\n    case \"date\": {\n      const pattern = getDatePattern();\n      element.minLength = element.maxLength = pattern.length;\n      element.pattern = `.{${pattern.length},${pattern.length}}`;\n      listener = () => {\n        try {\n          const maskedDate = inputDate(element.value);\n          element.value = maskedDate;\n          element.defaultValue = maskedDate;\n        } catch {\n          element.value = element.defaultValue;\n        }\n      };\n      break;\n    }\n    default: {\n      element.minLength = pattern.length;\n      element.maxLength = patterns.at(-1)?.length || pattern.length;\n      element.pattern = `.{${pattern.length},${\n        patterns.at(-1)?.length || pattern.length\n      }}`;\n      listener = () => {\n        element.value = mask(element.value, patterns);\n      };\n    }\n  }\n\n  element.value && listener();\n  element.addEventListener(\"input\", listener);\n\n  return () => {\n    element.removeEventListener(\"input\", listener);\n  };\n};\n","import { input } from \"./input\";\n\n/**\n * Mask all inputs what have data-index attribute\n */\nexport const prepareMaskInputs = (): void => {\n  const inputs = document.querySelectorAll(\"[data-mask]\");\n  inputs.forEach((el: any) => input(el, datasetToObject(el.dataset.mask)));\n};\n\n/**\n * Transform dataset to object\n */\nconst datasetToObject = (value: string): string[] =>\n  JSON.parse(value.replace(/'/g, '\"'));\n"],"names":[],"mappings":"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"}