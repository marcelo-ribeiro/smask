var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Z:()=>y});const r={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},a=(e,t)=>e?(e=e.replace(/\W/gi,""),t?e.slice(0,t.replace(/\W/gi,"").length):e):e,n=(e,t)=>{if(!e||!t)return"";const n=[...a(e,t)],l=[...a(t)];for(let e=0,a=t.length;e<a&&n[e];e++)r[l[e]].test(n[e])?/\W/.test(t[e])?n.splice(e,0,t[e])&&l.splice(e,0,t[e]):n.splice(e,1,r[l[e]].transform(n[e])):n.splice(e,1);return n.join("")},l=(e,t)=>{let r=e.replace(/\D/g,"");return r&&"currency"===t&&(r/=100),r||0},o=(e,t)=>{const r=t.find((e=>"group"===e.type)).value,a=t.find((e=>"decimal"===e.type)).value;let n=e.replaceAll(r,"").replace(a,".");return Number.isNaN(n)?NaN:+n},s=(e,t,{...r}={},a)=>(r={...r,...u(a||"pt-BR")[t]},new Intl.NumberFormat(a,r).format(e)),c=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),u=e=>({currency:{style:"currency",currency:c.get(e)},decimal:{},percent:{}}),p=(e,t="currency",{...r}={},a)=>s(parseFloat(e),t,r,a),m=e=>new Intl.DateTimeFormat(e).formatToParts(),i="01/01/1970".replace(/\D/g,""),g=(e,t)=>{const r=e.split("/"),{month:a,day:n,year:l}={[m(t)[0].type]:r[0],[m(t)[2].type]:r[1],[m(t)[4].type]:r[2]};return new Date(`${a}/${n}/${l}`)},h=new Map,d=(e,t)=>{if(!Array.isArray(t))throw ReferenceError("Pattern is not an array");if(!t)throw ReferenceError("Missing second parameter pattern.");const r="object"==typeof e?e:document.querySelector(e);if(!r)throw Error("Element not found.");h.set(r,{}),t.length>1&&t.sort(((e,t)=>e.length-t.length));let[a,o]=t,s=()=>{};switch(a){case"currency":s=()=>r.value=p(l(r.value,a),a);break;case"date":{const e=(e=>{let t="";return m(void 0).forEach((({type:e,value:r})=>{"month"===e||"day"===e?t+="dd":"year"===e?t+="dddd":"literal"===e&&(t+=r)})),t})();r.minLength=r.maxLength=r.minlength=r.maxlength=e.length,r.pattern=`.{${e.length},${e.length}}`,s=()=>{r.value=((e,t,r)=>{const a=g(((e,t)=>n(e,t))((l=(l=e.value).replace(/\D/g,""))+i.slice(l.length),t),r);var l;return n(isNaN(a.valueOf())?h.get(e).oldValue:e.value,t)})(r,e),((e,t={})=>{h.set(e,{...h.get(e),...t})})(r,{oldValue:r.value})};break}default:r.minLength=r.minlength=a.length,r.maxLength=r.maxlength=o?.length||a.length,r.pattern=`.{${a.length},${o?.length||a.length}}`,s=o?()=>{r.value=n(r.value,r.value.length<=a.length?a:o)}:()=>r.value=n(r.value,a)}r.value&&s(),r.addEventListener("input",s)},y={mask:n,unmask:a,input:d,prepareMaskInputs:()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>{return d(e,(t=e.dataset.mask,JSON.parse(t.replace(/'/g,'"'))));var t}))},number:s,currency:p,date:g,unmaskNumber:l,reverseNumberFormat:(e,t)=>{const r=new Intl.NumberFormat(t).formatToParts(1111.1);return o(e,r)},reverseCurrencyFormat:(e,t,r)=>{const a=new Intl.NumberFormat(t,{style:"currency",currency:r}).formatToParts(1111.1),n=a.find((e=>"currency"===e.type)).value,l=e.replace(n,"");return o(l,a)}};var f=t.Z;export{f as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,