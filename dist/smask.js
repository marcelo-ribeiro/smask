var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Z:()=>g});const r={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},a=(e,t)=>e?(e=e.replace(/\W/gi,""),t?e.slice(0,t.replace(/\W/gi,"").length):e):e,n=(e,t)=>{if(!e||!t)return"";const n=[...a(e,t)],l=[...a(t)];for(let e=0,a=t.length;e<a&&n[e];e++)r[l[e]].test(n[e])?/\W/.test(t[e])?n.splice(e,0,t[e])&&l.splice(e,0,t[e]):n.splice(e,1,r[l[e]].transform(n[e])):n.splice(e,1);return n.join("")},l=(e,t)=>{let r=e.replace(/\D/g,"");return r&&"currency"===t&&(r/=100),r||0},s=(e,t)=>{const r=t.find((e=>"group"===e.type)).value,a=t.find((e=>"decimal"===e.type)).value;let n=e.replaceAll(r,"").replace(a,".");return Number.isNaN(n)?NaN:+n},c=(e,t,{...r}={},a)=>(r={...r,...u(a||"pt-BR")[t]},new Intl.NumberFormat(a,r).format(e)),o=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),u=e=>({currency:{style:"currency",currency:o.get(e)},decimal:{},percent:{}}),i=(e,t="currency",{...r}={},a)=>c(parseFloat(e),t,r,a),p=e=>new Intl.DateTimeFormat(e).formatToParts(),m="01/01/1970".replace(/\D/g,""),d=(e,t)=>{const r=e.split("/"),{month:a,day:n,year:l}={[p(t)[0].type]:r[0],[p(t)[2].type]:r[1],[p(t)[4].type]:r[2]};return new Date(`${a}/${n}/${l}`)},y=(e,t)=>{if(!Array.isArray(t))throw ReferenceError("Pattern is not array");if(!t)throw ReferenceError("Missing second parameter pattern.");"string"==typeof e&&(e=document.querySelector(e));let[r,a]=t,s=()=>{};switch(e.addEventListener("keydown",(e=>{[32,37,38,39,40].includes(e.keyCode)&&e.preventDefault()})),e.addEventListener("focus",(()=>e.setSelectionRange(-1,-1))),e.addEventListener("click",(()=>e.setSelectionRange(-1,-1))),r){case"currency":s=()=>e.value=i(l(e.value,r),r);break;case"date":{const t=(e=>{let t="";return p(void 0).forEach((({type:e,value:r})=>{"month"===e||"day"===e?t+="dd":"year"===e?t+="dddd":"literal"===e&&(t+=r)})),t})();e.minLength=e.maxLength=t.length,e.pattern=`.{${t.length},${t.length}}`,s=()=>e.value=((e,t,r)=>{const a=d(((e,t)=>n(e,t))((e=>(e=e.replace(/\D/g,""))+m.slice(e.length))(e),t),r);return n(isNaN(a.valueOf())?e.slice(0,-1):e,t)})(e.value,t);break}default:t.sort(((e,t)=>e.length-t.length)),e.minLength=r.length,e.maxLength=a?.length||e.minLength,e.pattern=`.{${r.length},${a?.length||r.length}}`,s=a?()=>e.value=n(e.value,e.value.length<=e.minLength?r:a):()=>e.value=n(e.value,r)}e.value&&s(),e.addEventListener("input",s)},g={mask:n,unmask:a,input:y,prepareMaskInputs:()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>{return y(e,(t=e.dataset.mask,JSON.parse(t.replace(/'/g,'"'))));var t}))},number:c,currency:i,date:d,unmaskNumber:l,reverseNumberFormat:(e,t)=>{const r=new Intl.NumberFormat(t).formatToParts(1111.1);return s(e,r)},reverseCurrencyFormat:(e,t,r)=>{const a=new Intl.NumberFormat(t,{style:"currency",currency:r}).formatToParts(1111.1),n=a.find((e=>"currency"===e.type)).value,l=e.replace(n,"");return s(l,a)}};var f=t.Z;export{f as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,