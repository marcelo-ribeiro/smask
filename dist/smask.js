var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Aq:()=>g,hT:()=>f,Rm:()=>v,LU:()=>y,qH:()=>w,sS:()=>n,A3:()=>d,Rx:()=>u,VT:()=>b,ew:()=>o,UR:()=>s,ec:()=>a,eA:()=>l});const r={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},a=(e,t)=>e?(e=e.replace(/\W/gi,""),t?e.slice(0,t.replace(/\W/gi,"").length):e):e,n=(e,t)=>{if(!e||!t)return e;let n="";for(let l=a(e,t),s=a(t),o=0,c=0,u=t.length;o<u&&l[c];o++){const e=r[s[c]],a=t[o],u=l[c];if(!e.test(u))break;/\W/.test(a)?n+=a:(n+=e.transform(u),c++)}return n},l=(e,t)=>{let r=e.replace(/\D/g,"");return r&&"currency"===t&&(r/=100),r||0},s=(e,t)=>{const r=new Intl.NumberFormat(t).formatToParts(1111.1);return c(e,r)},o=(e,t,r)=>{const a=new Intl.NumberFormat(t,{style:"currency",currency:r}).formatToParts(1111.1),n=a.find((e=>"currency"===e.type)).value,l=e.replace(n,"");return c(l,a)},c=(e,t)=>{const r=t.find((e=>"group"===e.type)).value,a=t.find((e=>"decimal"===e.type)).value;let n=e.replaceAll(r,"").replace(a,".");return Number.isNaN(n)?NaN:+n},u=(e,t="decimal",{...r}={},a="pt-BR")=>{const n=p(a)[t];return r={...r,...n},new Intl.NumberFormat(a,r).format(e)},m=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),p=e=>({currency:{style:"currency",currency:m.get(e)},decimal:{},percent:{}}),g=(e,t="currency",{...r}={},a)=>u(parseFloat(e),t,r,a),h=e=>new Intl.DateTimeFormat(e).formatToParts(),i="01/01/1970".replace(/\D/g,""),d=(e,t,r)=>{const a=f(((e,t)=>n(e,t))((l=(l=e.value).replace(/\D/g,""))+i.slice(l.length),t),r);var l;return n(isNaN(a.valueOf())?v.get(e).oldValue:e.value,t)},y=e=>{let t="";return h(e).forEach((({type:e,value:r})=>{"month"===e||"day"===e?t+="dd":"year"===e?t+="dddd":"literal"===e&&(t+=r)})),t},f=(e,t)=>{const r=e.split("/"),{month:a,day:n,year:l}={[h(t)[0].type]:r[0],[h(t)[2].type]:r[1],[h(t)[4].type]:r[2]};return new Date(`${a}/${n}/${l}`)},v=new Map,w=(e,t)=>{if(!Array.isArray(t))throw ReferenceError("Pattern is not an array");if(!t)throw ReferenceError("Missing second parameter pattern.");const r="object"==typeof e?e:document.querySelector(e);if(!r)throw Error("Element not found.");v.set(r,{}),t.length>1&&t.sort(((e,t)=>e.length-t.length));let[a,s]=t,o=()=>{};switch(a){case"currency":r.placeholder=g(0),o=()=>r.value=g(l(r.value,a),a);break;case"date":{const e=y();r.minLength=r.maxLength=r.minlength=r.maxlength=e.length,r.pattern=`.{${e.length},${e.length}}`,o=()=>{r.value=d(r,e),((e,t={})=>{v.set(e,{...v.get(e),...t})})(r,{oldValue:r.value})};break}default:r.minLength=r.minlength=a.length,r.maxLength=r.maxlength=s?.length||a.length,r.pattern=`.{${a.length},${s?.length||a.length}}`,o=s?()=>{r.value=n(r.value,r.value.length<=a.length?a:s)}:()=>r.value=n(r.value,a)}r.value&&o(),r.addEventListener("input",o)},b=()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>w(e,A(e.dataset.mask))))},A=e=>JSON.parse(e.replace(/'/g,'"'));var N=t.Aq,R=t.hT,k=t.Rm,L=t.LU,D=t.qH,T=t.sS,U=t.A3,x=t.Rx,C=t.VT,E=t.ew,F=t.UR,P=t.ec,S=t.eA;export{N as currency,R as date,k as elements,L as getDatePattern,D as input,T as mask,U as maskDate,x as number,C as prepareMaskInputs,E as reverseCurrencyFormat,F as reverseNumberFormat,P as unmask,S as unmaskNumber};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVNtQixFQUFJbkUsR0F4Q1osRUFBQ2lELEVBQVNaLEVBQVUsTUFDdEMsRUFBU2tDLElBQUl0QixFQUFTLElBQ2pCLEVBQVNwRSxJQUFJb0UsTUFDYlosS0FzQ0M0QyxDQUFZZCxFQUFJLENBQUViLFNBQVVhLEVBQUdwRSxTQUVqQyxNQUVGLFFBQ0VvRSxFQUFHVSxVQUFZVixFQUFHWSxVQUFZL0UsRUFBUUcsT0FDdENnRSxFQUFHVyxVQUFZWCxFQUFHYSxVQUFZTixHQUFnQnZFLFFBQVVILEVBQVFHLE9BQ2hFZ0UsRUFBR25FLFFBQVUsS0FBS0EsRUFBUUcsVUFDeEJ1RSxHQUFnQnZFLFFBQVVILEVBQVFHLFVBRXBDd0UsRUFBV0QsRUFDUCxLQUNFUCxFQUFHcEUsTUFBUUssRUFDVCtELEVBQUdwRSxNQUNIb0UsRUFBR3BFLE1BQU1JLFFBQVVILEVBQVFHLE9BQVNILEVBQVUwRSxJQUdsRCxJQUFPUCxFQUFHcEUsTUFBUUssRUFBSytELEVBQUdwRSxNQUFPQyxHQUd6Q21FLEVBQUdwRSxPQUFTNEUsSUFDWlIsRUFBR2UsaUJBQWlCLFFBQVNQLElDL0RsQlEsRUFBb0IsS0FDL0IsSUFBSWYsU0FBU2dCLGlCQUFpQixnQkFBZ0I1QixTQUFTVyxHQUNyRDdELEVBQU02RCxFQUFJa0IsRUFBZ0JsQixFQUFHbUIsUUFBUWxGLFVBSW5DaUYsRUFBbUJ0RixHQUFVd0YsS0FBS0MsTUFBTXpGLEVBQU1FLFFBQVEsS0FBTSxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hc2svd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc21hc2svd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3NtYXNrL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc21hc2svLi9zcmMvdG9rZW5zLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL3VubWFzay5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9tYXNrLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL3VubWFza051bWJlci5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vc21hc2svLi9zcmMvY3VycmVuY3kuanMiLCJ3ZWJwYWNrOi8vc21hc2svLi9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9pbnB1dC5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9wcmVwYXJlTWFza0lucHV0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImV4cG9ydCBjb25zdCB0b2tlbnMgPSB7XG4gIGQ6IHsgdGVzdDogKHYpID0+IC9cXGQvLnRlc3QodiksIHRyYW5zZm9ybTogKHYpID0+IHYgfSxcbiAgYTogeyB0ZXN0OiAodikgPT4gL1thLXpdL2kudGVzdCh2KSwgdHJhbnNmb3JtOiAodikgPT4gdi50b0xvd2VyQ2FzZSgpIH0sXG4gIEE6IHsgdGVzdDogKHYpID0+IC9bYS16XS9pLnRlc3QodiksIHRyYW5zZm9ybTogKHYpID0+IHYudG9VcHBlckNhc2UoKSB9LFxuICB3OiB7IHRlc3Q6ICh2KSA9PiAvXFx3Ly50ZXN0KHYpLCB0cmFuc2Zvcm06ICh2KSA9PiB2LnRvTG93ZXJDYXNlKCkgfSxcbiAgVzogeyB0ZXN0OiAodikgPT4gL1xcdy8udGVzdCh2KSwgdHJhbnNmb3JtOiAodikgPT4gdi50b1VwcGVyQ2FzZSgpIH0sXG59O1xuIiwiLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGF0dGVybj1cIlwiXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IHVubWFzayA9ICh2YWx1ZSwgcGF0dGVybikgPT4ge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxXL2dpLCBcIlwiKTtcbiAgcmV0dXJuIHBhdHRlcm4gPyB2YWx1ZS5zbGljZSgwLCBwYXR0ZXJuLnJlcGxhY2UoL1xcVy9naSwgXCJcIikubGVuZ3RoKSA6IHZhbHVlO1xufTtcbiIsImltcG9ydCB7IHRva2VucyB9IGZyb20gXCIuL3Rva2Vucy5qc1wiO1xuaW1wb3J0IHsgdW5tYXNrIH0gZnJvbSBcIi4vdW5tYXNrLmpzXCI7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVyblxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IG1hc2sgPSAodmFsdWUsIHBhdHRlcm4pID0+IHtcbiAgaWYgKCF2YWx1ZSB8fCAhcGF0dGVybikgcmV0dXJuIHZhbHVlO1xuXG4gIGxldCBvdXRwdXQgPSBcIlwiO1xuXG4gIGZvciAoXG4gICAgbGV0IGlucHV0ID0gdW5tYXNrKHZhbHVlLCBwYXR0ZXJuKSxcbiAgICAgIHVubWFza2VkID0gdW5tYXNrKHBhdHRlcm4pLFxuICAgICAgaSA9IDAsXG4gICAgICBpaSA9IDAsXG4gICAgICBwbCA9IHBhdHRlcm4ubGVuZ3RoO1xuICAgIGkgPCBwbCAmJiBpbnB1dFtpaV07XG4gICAgaSsrXG4gICkge1xuICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW3VubWFza2VkW2lpXV0sXG4gICAgICBwYXR0ZXJuQ2hhciA9IHBhdHRlcm5baV0sXG4gICAgICBpbnB1dENoYXIgPSBpbnB1dFtpaV07XG5cbiAgICBpZiAoIXRva2VuLnRlc3QoaW5wdXRDaGFyKSkgYnJlYWs7XG4gICAgZWxzZSBpZiAoL1xcVy8udGVzdChwYXR0ZXJuQ2hhcikpIG91dHB1dCArPSBwYXR0ZXJuQ2hhcjtcbiAgICBlbHNlIChvdXRwdXQgKz0gdG9rZW4udHJhbnNmb3JtKGlucHV0Q2hhcikpLCBpaSsrO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn07XG4iLCIvKipcbiAqIFJlbW92ZSBub24tbnVtZXJpYyBjaGFyYWN0ZXJzIGZyb20gYSBzdHJpbmdcbiAqIGFuZCBpZiBwYXR0ZXJuIGVxdWFscyBjdXJyZW5jeSwgZGl2aWRlIGJ5IDEwMFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhdHRlcm49dW5kZWZpbmVkXVxuICogQHJldHVybnMge3N0cmluZ3xpbnR9XG4gKi9cbmV4cG9ydCBjb25zdCB1bm1hc2tOdW1iZXIgPSAodmFsdWUsIHBhdHRlcm4pID0+IHtcbiAgbGV0IG91dHB1dCA9IHZhbHVlLnJlcGxhY2UoL1xcRC9nLCBcIlwiKTtcbiAgaWYgKG91dHB1dCAmJiBcImN1cnJlbmN5XCIgPT09IHBhdHRlcm4pIG91dHB1dCA9IG91dHB1dCAvIDEwMDtcbiAgcmV0dXJuIG91dHB1dCB8fCAwO1xufTtcblxuLyoqXG4gKiBSZXZlcnNlIE51bWJlciBGb3JtYXRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJldmVyc2VOdW1iZXJGb3JtYXQgPSAodmFsdWUsIGxvY2FsZSkgPT4ge1xuICBjb25zdCBwYXJ0cyA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUpLmZvcm1hdFRvUGFydHMoMTExMS4xKTtcbiAgcmV0dXJuIHJldmVyc2VGb3JtYXQodmFsdWUsIHBhcnRzKTtcbn07XG5cbi8qKlxuICogUmV2ZXJzZSBDdXJyZW5jeSBGb3JtYXRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbmN5XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgcmV2ZXJzZUN1cnJlbmN5Rm9ybWF0ID0gKHZhbHVlLCBsb2NhbGUsIGN1cnJlbmN5KSA9PiB7XG4gIGNvbnN0IHBhcnRzID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwge1xuICAgIHN0eWxlOiBcImN1cnJlbmN5XCIsXG4gICAgY3VycmVuY3ksXG4gIH0pLmZvcm1hdFRvUGFydHMoMTExMS4xKTtcbiAgY29uc3Qgc3ltYm9sID0gcGFydHMuZmluZCgocGFydCkgPT4gcGFydC50eXBlID09PSBcImN1cnJlbmN5XCIpLnZhbHVlO1xuICBjb25zdCByZXZlcnNlZFZhbCA9IHZhbHVlLnJlcGxhY2Uoc3ltYm9sLCBcIlwiKTtcbiAgcmV0dXJuIHJldmVyc2VGb3JtYXQocmV2ZXJzZWRWYWwsIHBhcnRzKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge2FycmF5fSBwYXJ0c1xuICogQHJldHVybnMge251bWJlcnxudW1iZXJ9XG4gKi9cbmNvbnN0IHJldmVyc2VGb3JtYXQgPSAodmFsdWUsIHBhcnRzKSA9PiB7XG4gIGNvbnN0IGdyb3VwID0gcGFydHMuZmluZCgocGFydCkgPT4gcGFydC50eXBlID09PSBcImdyb3VwXCIpLnZhbHVlO1xuICBjb25zdCBkZWNpbWFsID0gcGFydHMuZmluZCgocGFydCkgPT4gcGFydC50eXBlID09PSBcImRlY2ltYWxcIikudmFsdWU7XG4gIGxldCByZXZlcnNlZFZhbCA9IHZhbHVlLnJlcGxhY2VBbGwoZ3JvdXAsIFwiXCIpLnJlcGxhY2UoZGVjaW1hbCwgXCIuXCIpO1xuICByZXR1cm4gTnVtYmVyLmlzTmFOKHJldmVyc2VkVmFsKSA/IE5hTiA6ICtyZXZlcnNlZFZhbDtcbn07XG4iLCIvKipcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3R5bGU9ZGVjaW1hbF1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYWxlPXB0LUJSXVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IG51bWJlciA9IChcbiAgdmFsdWUsXG4gIHN0eWxlID0gXCJkZWNpbWFsXCIsXG4gIHsgLi4ub3B0aW9ucyB9ID0ge30sXG4gIGxvY2FsZSA9IFwicHQtQlJcIlxuKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0T3B0aW9ucyhsb2NhbGUpW3N0eWxlXTtcbiAgb3B0aW9ucyA9IHsgLi4ub3B0aW9ucywgLi4uZGVmYXVsdE9wdGlvbnMgfTtcbiAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSk7XG59O1xuXG4vKiBUbyBiZSB1cGRhdGVkIGJhc2VkIG9uIG5lZWQgLSBGcmVuY2ggLSBDYW5hZGEgYW5kIFVTIGxvY2FsZSBoYW5kbGVkICAqL1xuY29uc3QgY3VycmVuY3lUb0xvY2FsZSA9IG5ldyBNYXAoW1xuICBbXCJlbi1VU1wiLCBcIlVTRFwiXSxcbiAgW1wicHQtQlJcIiwgXCJCUkxcIl0sXG4gIFtcImZyLUNBXCIsIFwiQ0FEXCJdLFxuXSk7XG5cbmNvbnN0IGdldE9wdGlvbnMgPSAobG9jYWxlKSA9PiAoe1xuICBjdXJyZW5jeToge1xuICAgIHN0eWxlOiBcImN1cnJlbmN5XCIsXG4gICAgY3VycmVuY3k6IGN1cnJlbmN5VG9Mb2NhbGUuZ2V0KGxvY2FsZSksXG4gIH0sXG4gIGRlY2ltYWw6IHt9LFxuICBwZXJjZW50OiB7fSxcbn0pO1xuIiwiaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8aW50fSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtzdHlsZT1cImN1cnJlbmN5XCJdXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZV1cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBjdXJyZW5jeSA9IChcbiAgdmFsdWUsXG4gIHN0eWxlID0gXCJjdXJyZW5jeVwiLFxuICB7IC4uLm9wdGlvbnMgfSA9IHt9LFxuICBsb2NhbGVcbikgPT4ge1xuICByZXR1cm4gbnVtYmVyKHBhcnNlRmxvYXQodmFsdWUpLCBzdHlsZSwgb3B0aW9ucywgbG9jYWxlKTtcbn07XG4iLCJpbXBvcnQgeyBtYXNrIH0gZnJvbSBcIi4vbWFzay5qc1wiO1xuaW1wb3J0IHsgZWxlbWVudHMgfSBmcm9tIFwiLi9pbnB1dC5qc1wiO1xuXG5jb25zdCBkYXRlUGFydHMgPSAobG9jYWxlKSA9PiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUpLmZvcm1hdFRvUGFydHMoKTtcbmNvbnN0IGluaXRpYWxEYXRlID0gXCIwMS8wMS8xOTcwXCIucmVwbGFjZSgvXFxEL2csIFwiXCIpO1xuY29uc3QgZ2V0TWFza2VkRGF0ZSA9ICh2YWx1ZSwgcGF0dGVybikgPT4gbWFzayh2YWx1ZSwgcGF0dGVybik7XG5jb25zdCBnZXRDb21wdXRlZERhdGUgPSAodmFsdWUpID0+IHtcbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gIHJldHVybiB2YWx1ZSArIGluaXRpYWxEYXRlLnNsaWNlKHZhbHVlLmxlbmd0aCk7XG59O1xuXG4vKipcbiAqIEdldCBEYXRlIE1hc2tlZFxuICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGU9dW5kZWZpbmVkXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IG1hc2tEYXRlID0gKGVsZW1lbnQsIHBhdHRlcm4sIGxvY2FsZSA9IHVuZGVmaW5lZCkgPT4ge1xuICBjb25zdCBkYXRlT2JqZWN0ID0gZGF0ZShcbiAgICBnZXRNYXNrZWREYXRlKGdldENvbXB1dGVkRGF0ZShlbGVtZW50LnZhbHVlKSwgcGF0dGVybiksXG4gICAgbG9jYWxlXG4gICk7XG4gIHJldHVybiBtYXNrKFxuICAgIGlzTmFOKGRhdGVPYmplY3QudmFsdWVPZigpKVxuICAgICAgPyBlbGVtZW50cy5nZXQoZWxlbWVudCkub2xkVmFsdWVcbiAgICAgIDogZWxlbWVudC52YWx1ZSxcbiAgICBwYXR0ZXJuXG4gICk7XG59O1xuXG4vKipcbiAqIEdldCBEYXRlIFBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYWxlPXVuZGVmaW5lZF1cbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXREYXRlUGF0dGVybiA9IChsb2NhbGUgPSB1bmRlZmluZWQpID0+IHtcbiAgbGV0IHBhdHRlcm4gPSBcIlwiO1xuICBkYXRlUGFydHMobG9jYWxlKS5mb3JFYWNoKCh7IHR5cGUsIHZhbHVlIH0pID0+IHtcbiAgICBpZiAodHlwZSA9PT0gXCJtb250aFwiIHx8IHR5cGUgPT09IFwiZGF5XCIpIHBhdHRlcm4gKz0gXCJkZFwiO1xuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwieWVhclwiKSBwYXR0ZXJuICs9IFwiZGRkZFwiO1xuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwibGl0ZXJhbFwiKSBwYXR0ZXJuICs9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHBhdHRlcm47XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGU9dW5kZWZpbmVkXVxuICogQHJldHVybnMge0RhdGV9XG4gKi9cbmV4cG9ydCBjb25zdCBkYXRlID0gKHZhbHVlLCBsb2NhbGUgPSB1bmRlZmluZWQpID0+IHtcbiAgY29uc3QgdmFsdWVBcnJheSA9IHZhbHVlLnNwbGl0KFwiL1wiKTtcbiAgY29uc3QgeyBtb250aCwgZGF5LCB5ZWFyIH0gPSB7XG4gICAgW2RhdGVQYXJ0cyhsb2NhbGUpWzBdLnR5cGVdOiB2YWx1ZUFycmF5WzBdLFxuICAgIFtkYXRlUGFydHMobG9jYWxlKVsyXS50eXBlXTogdmFsdWVBcnJheVsxXSxcbiAgICBbZGF0ZVBhcnRzKGxvY2FsZSlbNF0udHlwZV06IHZhbHVlQXJyYXlbMl0sXG4gIH07XG4gIGNvbnN0IGRhdGVGb3JtYXQgPSBgJHttb250aH0vJHtkYXl9LyR7eWVhcn1gO1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZUZvcm1hdCk7XG59O1xuIiwiaW1wb3J0IHsgbWFzayB9IGZyb20gXCIuL21hc2suanNcIjtcbmltcG9ydCB7IHVubWFza051bWJlciB9IGZyb20gXCIuL3VubWFza051bWJlci5qc1wiO1xuaW1wb3J0IHsgY3VycmVuY3kgfSBmcm9tIFwiLi9jdXJyZW5jeS5qc1wiO1xuaW1wb3J0IHsgZ2V0RGF0ZVBhdHRlcm4sIG1hc2tEYXRlIH0gZnJvbSBcIi4vZGF0ZS5qc1wiO1xuXG5leHBvcnQgY29uc3QgZWxlbWVudHMgPSBuZXcgTWFwKCk7XG5jb25zdCBzZXRFbGVtZW50cyA9IChlbGVtZW50LCBvcHRpb25zID0ge30pID0+XG4gIGVsZW1lbnRzLnNldChlbGVtZW50LCB7XG4gICAgLi4uZWxlbWVudHMuZ2V0KGVsZW1lbnQpLFxuICAgIC4uLm9wdGlvbnMsXG4gIH0pO1xuXG4vKipcbiAqIG1hc2tJbnB1dFxuICogQHBhcmFtIHtzdHJpbmd8SFRNTElucHV0RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IFNlbGVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0dGVybnMgZGVjaW1hbHxjdXJyZW5jeVxuICovXG5leHBvcnQgY29uc3QgaW5wdXQgPSAoZWxlbWVudCwgcGF0dGVybnMpID0+IHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHBhdHRlcm5zKSkgdGhyb3cgUmVmZXJlbmNlRXJyb3IoXCJQYXR0ZXJuIGlzIG5vdCBhbiBhcnJheVwiKTtcbiAgaWYgKCFwYXR0ZXJucykgdGhyb3cgUmVmZXJlbmNlRXJyb3IoXCJNaXNzaW5nIHNlY29uZCBwYXJhbWV0ZXIgcGF0dGVybi5cIik7XG5cbiAgY29uc3QgZWwgPVxuICAgIHR5cGVvZiBlbGVtZW50ID09PSBcIm9iamVjdFwiID8gZWxlbWVudCA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCk7XG4gIGlmICghZWwpIHRocm93IEVycm9yKFwiRWxlbWVudCBub3QgZm91bmQuXCIpO1xuICBlbGVtZW50cy5zZXQoZWwsIHt9KTtcbiAgaWYgKHBhdHRlcm5zLmxlbmd0aCA+IDEpIHBhdHRlcm5zLnNvcnQoKGEsIGIpID0+IGEubGVuZ3RoIC0gYi5sZW5ndGgpO1xuICBsZXQgW3BhdHRlcm4sIGR5bmFtaWNQYXR0ZXJuXSA9IHBhdHRlcm5zO1xuICBsZXQgbGlzdGVuZXIgPSAoKSA9PiB7fTtcblxuICAvLyBJbml0aWFsaXplIGlucHV0IGxpc3RlbmVyIGJ5IG1hc2tcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSBcImN1cnJlbmN5XCI6IHtcbiAgICAgIGVsLnBsYWNlaG9sZGVyID0gY3VycmVuY3koMCk7XG4gICAgICBsaXN0ZW5lciA9ICgpID0+XG4gICAgICAgIChlbC52YWx1ZSA9IGN1cnJlbmN5KHVubWFza051bWJlcihlbC52YWx1ZSwgcGF0dGVybiksIHBhdHRlcm4pKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGF0ZVwiOiB7XG4gICAgICBjb25zdCBwYXR0ZXJuID0gZ2V0RGF0ZVBhdHRlcm4oKTtcbiAgICAgIGVsLm1pbkxlbmd0aCA9XG4gICAgICAgIGVsLm1heExlbmd0aCA9XG4gICAgICAgIGVsLm1pbmxlbmd0aCA9XG4gICAgICAgIGVsLm1heGxlbmd0aCA9XG4gICAgICAgICAgcGF0dGVybi5sZW5ndGg7XG4gICAgICBlbC5wYXR0ZXJuID0gYC57JHtwYXR0ZXJuLmxlbmd0aH0sJHtwYXR0ZXJuLmxlbmd0aH19YDtcbiAgICAgIGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBlbC52YWx1ZSA9IG1hc2tEYXRlKGVsLCBwYXR0ZXJuKTtcbiAgICAgICAgc2V0RWxlbWVudHMoZWwsIHsgb2xkVmFsdWU6IGVsLnZhbHVlIH0pO1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICBlbC5taW5MZW5ndGggPSBlbC5taW5sZW5ndGggPSBwYXR0ZXJuLmxlbmd0aDtcbiAgICAgIGVsLm1heExlbmd0aCA9IGVsLm1heGxlbmd0aCA9IGR5bmFtaWNQYXR0ZXJuPy5sZW5ndGggfHwgcGF0dGVybi5sZW5ndGg7XG4gICAgICBlbC5wYXR0ZXJuID0gYC57JHtwYXR0ZXJuLmxlbmd0aH0sJHtcbiAgICAgICAgZHluYW1pY1BhdHRlcm4/Lmxlbmd0aCB8fCBwYXR0ZXJuLmxlbmd0aFxuICAgICAgfX1gO1xuICAgICAgbGlzdGVuZXIgPSBkeW5hbWljUGF0dGVyblxuICAgICAgICA/ICgpID0+IHtcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbWFzayhcbiAgICAgICAgICAgICAgZWwudmFsdWUsXG4gICAgICAgICAgICAgIGVsLnZhbHVlLmxlbmd0aCA8PSBwYXR0ZXJuLmxlbmd0aCA/IHBhdHRlcm4gOiBkeW5hbWljUGF0dGVyblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogKCkgPT4gKGVsLnZhbHVlID0gbWFzayhlbC52YWx1ZSwgcGF0dGVybikpO1xuICAgIH1cbiAgfVxuICBlbC52YWx1ZSAmJiBsaXN0ZW5lcigpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgbGlzdGVuZXIpO1xufTtcbiIsImltcG9ydCB7IGlucHV0IH0gZnJvbSBcIi4vaW5wdXQuanNcIjtcblxuLyoqXG4gKiBNYXNrIGFsbCBpbnB1dHMgd2hhdCBoYXZlIGRhdGEtaW5kZXggYXR0cmlidXRlXG4gKi9cbmV4cG9ydCBjb25zdCBwcmVwYXJlTWFza0lucHV0cyA9ICgpID0+IHtcbiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1tYXNrXVwiKV0uZm9yRWFjaCgoZWwpID0+XG4gICAgaW5wdXQoZWwsIGRhdGFzZXRUb09iamVjdChlbC5kYXRhc2V0Lm1hc2spKVxuICApO1xufTtcblxuY29uc3QgZGF0YXNldFRvT2JqZWN0ID0gKHZhbHVlKSA9PiBKU09OLnBhcnNlKHZhbHVlLnJlcGxhY2UoLycvZywgJ1wiJykpO1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidG9rZW5zIiwiZCIsInRlc3QiLCJ2IiwidHJhbnNmb3JtIiwiYSIsInRvTG93ZXJDYXNlIiwiQSIsInRvVXBwZXJDYXNlIiwidyIsIlciLCJ1bm1hc2siLCJ2YWx1ZSIsInBhdHRlcm4iLCJyZXBsYWNlIiwic2xpY2UiLCJsZW5ndGgiLCJtYXNrIiwib3V0cHV0IiwiaW5wdXQiLCJ1bm1hc2tlZCIsImkiLCJpaSIsInBsIiwidG9rZW4iLCJwYXR0ZXJuQ2hhciIsImlucHV0Q2hhciIsInVubWFza051bWJlciIsInJldmVyc2VOdW1iZXJGb3JtYXQiLCJsb2NhbGUiLCJwYXJ0cyIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJmb3JtYXRUb1BhcnRzIiwicmV2ZXJzZUZvcm1hdCIsInJldmVyc2VDdXJyZW5jeUZvcm1hdCIsImN1cnJlbmN5Iiwic3R5bGUiLCJzeW1ib2wiLCJmaW5kIiwicGFydCIsInR5cGUiLCJyZXZlcnNlZFZhbCIsImdyb3VwIiwiZGVjaW1hbCIsInJlcGxhY2VBbGwiLCJOdW1iZXIiLCJpc05hTiIsIk5hTiIsIm51bWJlciIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImdldE9wdGlvbnMiLCJmb3JtYXQiLCJjdXJyZW5jeVRvTG9jYWxlIiwiTWFwIiwicGVyY2VudCIsInBhcnNlRmxvYXQiLCJkYXRlUGFydHMiLCJEYXRlVGltZUZvcm1hdCIsImluaXRpYWxEYXRlIiwibWFza0RhdGUiLCJlbGVtZW50IiwiZGF0ZU9iamVjdCIsImRhdGUiLCJnZXRNYXNrZWREYXRlIiwidmFsdWVPZiIsIm9sZFZhbHVlIiwiZ2V0RGF0ZVBhdHRlcm4iLCJmb3JFYWNoIiwidmFsdWVBcnJheSIsInNwbGl0IiwibW9udGgiLCJkYXkiLCJ5ZWFyIiwiRGF0ZSIsInBhdHRlcm5zIiwiQXJyYXkiLCJpc0FycmF5IiwiUmVmZXJlbmNlRXJyb3IiLCJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIkVycm9yIiwic2V0Iiwic29ydCIsImIiLCJkeW5hbWljUGF0dGVybiIsImxpc3RlbmVyIiwicGxhY2Vob2xkZXIiLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJtaW5sZW5ndGgiLCJtYXhsZW5ndGgiLCJzZXRFbGVtZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcmVwYXJlTWFza0lucHV0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkYXRhc2V0VG9PYmplY3QiLCJkYXRhc2V0IiwiSlNPTiIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiIifQ==