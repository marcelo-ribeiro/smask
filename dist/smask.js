var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Z:()=>f});const r={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},a=(e,t)=>e?(e=e.replace(/\W/gi,""),t?e.slice(0,t.replace(/\W/gi,"").length):e):e,n=(e,t)=>{if(!e||!t)return"";const n=[...a(e,t)],l=[...a(t)];for(let e=0,a=t.length;e<a&&n[e];e++)r[l[e]].test(n[e])?/\W/.test(t[e])?n.splice(e,0,t[e])&&l.splice(e,0,t[e]):n.splice(e,1,r[l[e]].transform(n[e])):n.splice(e,1);return n.join("")},l=(e,t)=>{let r=e.replace(/\D/g,"");return r&&"currency"===t&&(r/=100),r||0},s=(e,t)=>{const r=t.find((e=>"group"===e.type)).value,a=t.find((e=>"decimal"===e.type)).value;let n=e.replaceAll(r,"").replace(a,".");return Number.isNaN(n)?NaN:+n},o=(e,t,{...r}={},a)=>(r={...r,...u(a||"pt-BR")[t]},new Intl.NumberFormat(a,r).format(e)),c=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),u=e=>({currency:{style:"currency",currency:c.get(e)},decimal:{},percent:{}}),p=(e,t="currency",{...r}={},a)=>o(parseFloat(e),t,r,a),m=e=>new Intl.DateTimeFormat(e).formatToParts(),i="01/01/1970".replace(/\D/g,""),g=(e,t)=>{const r=e.split("/"),{month:a,day:n,year:l}={[m(t)[0].type]:r[0],[m(t)[2].type]:r[1],[m(t)[4].type]:r[2]};return new Date(`${a}/${n}/${l}`)},y=new Map,d=(e,t)=>{if(!Array.isArray(t))throw ReferenceError("Pattern is not array");if(!t)throw ReferenceError("Missing second parameter pattern.");"string"==typeof e&&(e=document.querySelector(e)),y.set(e,{});let[r,a]=t,s=()=>{};switch(r){case"currency":s=()=>e.value=p(l(e.value,r),r);break;case"date":{const t=(e=>{let t="";return m(void 0).forEach((({type:e,value:r})=>{"month"===e||"day"===e?t+="dd":"year"===e?t+="dddd":"literal"===e&&(t+=r)})),t})();e.minLength=e.maxLength=t.length,e.pattern=`.{${t.length},${t.length}}`,s=()=>{e.value=((e,t,r)=>{const a=g(((e,t)=>n(e,t))((l=(l=e.value).replace(/\D/g,""))+i.slice(l.length),t),r);var l;return n(isNaN(a.valueOf())?y.get(e).oldValue:e.value,t)})(e,t),((e,t={})=>{y.set(e,{...y.get(e),...t})})(e,{oldValue:e.value})};break}default:t.sort(((e,t)=>e.length-t.length)),e.minLength=r.length,e.maxLength=a?.length||e.minLength,e.pattern=`.{${r.length},${a?.length||r.length}}`,s=a?()=>e.value=n(e.value,e.value.length<=e.minLength?r:a):()=>e.value=n(e.value,r)}e.value&&s(),e.addEventListener("input",s)},f={mask:n,unmask:a,input:d,prepareMaskInputs:()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>{return d(e,(t=e.dataset.mask,JSON.parse(t.replace(/'/g,'"'))));var t}))},number:o,currency:p,date:g,unmaskNumber:l,reverseNumberFormat:(e,t)=>{const r=new Intl.NumberFormat(t).formatToParts(1111.1);return s(e,r)},reverseCurrencyFormat:(e,t,r)=>{const a=new Intl.NumberFormat(t,{style:"currency",currency:r}).formatToParts(1111.1),n=a.find((e=>"currency"===e.type)).value,l=e.replace(n,"");return s(l,a)}};var h=t.Z;export{h as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,