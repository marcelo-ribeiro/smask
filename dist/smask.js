var e={d:(r,t)=>{for(var a in t)e.o(t,a)&&!e.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:t[a]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r)},r={};e.d(r,{Z:()=>g});const t={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},a=(e,r)=>e?(e=e.replace(/\W/gi,""),r?e.slice(0,r.replace(/\W/gi,"").length):e):e,n=(e,r)=>{if(!e||!r)return"";const n=[...a(e,r)],l=[...a(r)];for(let e=0,a=r.length;e<a&&n[e];e++)t[l[e]].test(n[e])?/\W/.test(r[e])?n.splice(e,0,r[e])&&l.splice(e,0,r[e]):n.splice(e,1,t[l[e]].transform(n[e])):n.splice(e,1);return n.join("")},l=(e,r)=>{let t=e.replace(/\D/g,"");return t&&"currency"===r&&(t/=100),t||0},s=(e,r)=>{const t=r.find((e=>"group"===e.type)).value,a=r.find((e=>"decimal"===e.type)).value;let n=e.replaceAll(t,"").replace(a,".");return Number.isNaN(n)?NaN:+n},o=(e,r,{...t}={},a)=>(t={...t,...p(a||"pt-BR")[r]},new Intl.NumberFormat(a,t).format(e)),c=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),p=e=>({currency:{style:"currency",currency:c.get(e)},decimal:{},percent:{}}),u=(e,r="currency",{...t}={},a)=>o(parseFloat(e),r,t,a),m=(e,r)=>{const t=y(((e,r)=>n(e,r))(((e,r="01/01/1970".replace(/\D/g,""))=>(e=e.replace(/\D/g,""))+r.slice(e.length))(e),r));return n(isNaN(t.valueOf())?e.slice(0,-1):e,r)},i={parts:(new Intl.DateTimeFormat).formatToParts(),mask:"",placeholder:""},d={parts:(new Intl.DateTimeFormat).formatToParts(),valueArray:[],dateFormat:(e,r,t)=>`${e}/${r}/${t}`},y=(e,r)=>{d.valueArray=e.split("/");const{month:t,day:a,year:n}={[d.parts[0].type]:d.valueArray[0],[d.parts[2].type]:d.valueArray[1],[d.parts[4].type]:d.valueArray[2]};return new Date(d.dateFormat(t,a,n))},h=(e,r)=>{if(!Array.isArray(r))throw ReferenceError("Pattern is not array");if(!r)throw ReferenceError("Missing second parameter pattern.");"string"==typeof e&&(e=document.querySelector(e));let t,[a,s]=r;switch(a){case"currency":t=()=>e.value=u(l(e.value,a),a);break;case"date":{const{mask:r,placeholder:n}=(()=>{i.parts.forEach((({type:e,value:r})=>{"month"===e||"day"===e?(i.mask+="dd")&&(i.placeholder+="__"):"year"===e?(i.mask+="dddd")&&(i.placeholder+="____"):"literal"===e&&(i.mask+=r)&&(i.placeholder+=r)}));const e={mask:i.mask,placeholder:i.placeholder};return i.mask="",i.placeholder="",e})();e.placeholder=n,e.minLength=e.maxLength=a.length,e.pattern=`.{${a.length},${a.length}}`,t=()=>e.value=m(e.value,r);break}default:r.sort(((e,r)=>e.length-r.length)),e.minLength=a.length,e.maxLength=s?.length||e.minLength,e.pattern=`.{${a.length},${s?.length||a.length}}`,t=s?()=>e.value=n(e.value,e.value.length<=e.minLength?a:s):()=>e.value=n(e.value,a)}e.value&&t(),e.addEventListener("input",t)},g={mask:n,unmask:a,input:h,prepareMaskInputs:()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>{return h(e,(r=e.dataset.mask,JSON.parse(r.replace(/'/g,'"'))));var r}))},number:o,currency:u,date:y,unmaskNumber:l,reverseNumberFormat:(e,r)=>{const t=new Intl.NumberFormat(r).formatToParts(1111.1);return s(e,t)},reverseCurrencyFormat:(e,r,t)=>{const a=new Intl.NumberFormat(r,{style:"currency",currency:t}).formatToParts(1111.1),n=a.find((e=>"currency"===e.type)).value,l=e.replace(n,"");return s(l,a)}};var f=r.Z;export{f as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFzay93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zbWFzay93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc21hc2svd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy90b2tlbnMuanMiLCJ3ZWJwYWNrOi8vc21hc2svLi9zcmMvdW5tYXNrLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL21hc2suanMiLCJ3ZWJwYWNrOi8vc21hc2svLi9zcmMvdW5tYXNrTnVtYmVyLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9jdXJyZW5jeS5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9kYXRlLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL2lucHV0LmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL3ByZXBhcmVNYXNrSW5wdXRzLmpzIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidG9rZW5zIiwiZCIsInRlc3QiLCJ2IiwidHJhbnNmb3JtIiwiYSIsInRvTG93ZXJDYXNlIiwiQSIsInRvVXBwZXJDYXNlIiwidyIsIlciLCJ1bm1hc2siLCJ2YWx1ZSIsInBhdHRlcm4iLCJyZXBsYWNlIiwic2xpY2UiLCJsZW5ndGgiLCJtYXNrIiwib3V0cHV0IiwidW5tYXNrZWQiLCJpIiwibCIsInNwbGljZSIsImpvaW4iLCJ1bm1hc2tOdW1iZXIiLCJyZXZlcnNlRm9ybWF0IiwicGFydHMiLCJncm91cCIsImZpbmQiLCJwYXJ0IiwidHlwZSIsImRlY2ltYWwiLCJyZXZlcnNlZFZhbCIsInJlcGxhY2VBbGwiLCJOdW1iZXIiLCJpc05hTiIsIk5hTiIsIm51bWJlciIsInN0eWxlIiwib3B0aW9ucyIsImxvY2FsZSIsImdldE9wdGlvbnMiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiY3VycmVuY3lUb0xvY2FsZSIsIk1hcCIsImN1cnJlbmN5IiwicGVyY2VudCIsInBhcnNlRmxvYXQiLCJtYXNrRGF0ZSIsImRhdGVPYmplY3QiLCJkYXRlIiwibWFza0RhdGVNYXAiLCJpbml0aWFsRGF0ZSIsInZhbHVlT2YiLCJkYXRlUGF0dGVybk1hcCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0VG9QYXJ0cyIsInBsYWNlaG9sZGVyIiwiZGF0ZU1hcCIsInZhbHVlQXJyYXkiLCJkYXRlRm9ybWF0IiwibW9udGgiLCJkYXkiLCJ5ZWFyIiwic3BsaXQiLCJEYXRlIiwiaW5wdXQiLCJlbGVtZW50IiwicGF0dGVybnMiLCJBcnJheSIsImlzQXJyYXkiLCJSZWZlcmVuY2VFcnJvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImxpc3RlbmVyIiwiZHluYW1pY1BhdHRlcm4iLCJmb3JFYWNoIiwiZ2V0RGF0ZVBhdHRlcm4iLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJzb3J0IiwiYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJkYXRhc2V0IiwiSlNPTiIsInBhcnNlIiwic3ltYm9sIl0sIm1hcHBpbmdzIjoiQUFDQSxJQUFJQSxFQUFzQixDQ0ExQixFQUF3QixDQUFDQyxFQUFTQyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hGLEVBQW9CSSxFQUFFRixFQUFZQyxLQUFTSCxFQUFvQkksRUFBRUgsRUFBU0UsSUFDNUVFLE9BQU9DLGVBQWVMLEVBQVNFLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxNQ0ozRSxFQUF3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LG9CQ0xZLEtBRS9CLElBQUl5RCxTQUFTVyxpQkFBaUIsZ0JBQzNCUCxTQUFRUSxJQUFNbEIsU0FBTWtCLEdBRkMxRSxFQUVtQjBFLEVBQUdDLFFBQVF0RSxLQUZyQnVFLEtBQUtDLE1BQU03RSxFQUFNRSxRQUFRLEtBQU0sUUFBeENGLFVESWMsT0FBUSxXQUFVLE9BQU0sRUFDOURZLGFBQVksc0JMTXFCLENBQUNaLEVBQU80QixLQUN6QyxNQUFNZCxFQUFRLElBQUlnQixLQUFLQyxhQUFhSCxHQUFRa0IsY0FBYyxRQUMxRCxPQUFPakMsRUFBY2IsRUFBT2MsSUtSSyxzQkxrQkUsQ0FBQ2QsRUFBTzRCLEVBQVFPLEtBQ25ELE1BQU1yQixFQUFRLElBQUlnQixLQUFLQyxhQUFhSCxFQUFRLENBQUNGLE1BQU8sV0FBWVMsYUFBV1csY0FBYyxRQUNuRmdDLEVBQVNoRSxFQUFNRSxNQUFLQyxHQUFzQixhQUFkQSxFQUFLQyxPQUFxQmxCLE1BQ3REb0IsRUFBY3BCLEVBQU1FLFFBQVE0RSxFQUFRLElBQzFDLE9BQU9qRSxFQUFjTyxFQUFhTixLIiwiZmlsZSI6InNtYXNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJleHBvcnQgY29uc3QgdG9rZW5zID0ge1xuICBkOiB7dGVzdDogdiA9PiAvXFxkLy50ZXN0KHYpLCB0cmFuc2Zvcm06IHYgPT4gdn0sXG4gIGE6IHt0ZXN0OiB2ID0+IC9bYS16XS9pLnRlc3QodiksIHRyYW5zZm9ybTogdiA9PiB2LnRvTG93ZXJDYXNlKCl9LFxuICBBOiB7dGVzdDogdiA9PiAvW2Etel0vaS50ZXN0KHYpLCB0cmFuc2Zvcm06IHYgPT4gdi50b1VwcGVyQ2FzZSgpfSxcbiAgdzoge3Rlc3Q6IHYgPT4gL1xcdy8udGVzdCh2KSwgdHJhbnNmb3JtOiB2ID0+IHYudG9Mb3dlckNhc2UoKX0sXG4gIFc6IHt0ZXN0OiB2ID0+IC9cXHcvLnRlc3QodiksIHRyYW5zZm9ybTogdiA9PiB2LnRvVXBwZXJDYXNlKCl9XG59XG4iLCIvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXR0ZXJuPVwiXCJdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgdW5tYXNrID0gKHZhbHVlLCBwYXR0ZXJuKSA9PiB7XG4gIGlmICghdmFsdWUpIHJldHVybiB2YWx1ZVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcVy9pZywgXCJcIilcbiAgcmV0dXJuIHBhdHRlcm4gPyB2YWx1ZS5zbGljZSgwLCBwYXR0ZXJuLnJlcGxhY2UoL1xcVy9pZywgXCJcIikubGVuZ3RoKSA6IHZhbHVlXG59XG4iLCJpbXBvcnQge3Rva2Vuc30gZnJvbSBcIi4vdG9rZW5zLmpzXCJcbmltcG9ydCB7dW5tYXNrfSBmcm9tIFwiLi91bm1hc2suanNcIjtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgbWFzayA9ICh2YWx1ZSwgcGF0dGVybikgPT4ge1xuICBpZiAoIXZhbHVlIHx8ICFwYXR0ZXJuKSByZXR1cm4gXCJcIlxuICBjb25zdCBvdXRwdXQgPSBbLi4udW5tYXNrKHZhbHVlLCBwYXR0ZXJuKV0sIHVubWFza2VkID0gWy4uLnVubWFzayhwYXR0ZXJuKV1cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXR0ZXJuLmxlbmd0aDsgaSA8IGwgJiYgb3V0cHV0W2ldOyBpKyspXG4gICAgIXRva2Vuc1t1bm1hc2tlZFtpXV0udGVzdChvdXRwdXRbaV0pXG4gICAgICA/IG91dHB1dC5zcGxpY2UoaSwgMSlcbiAgICAgIDogL1xcVy8udGVzdChwYXR0ZXJuW2ldKVxuICAgICAgPyBvdXRwdXQuc3BsaWNlKGksIDAsIHBhdHRlcm5baV0pICYmIHVubWFza2VkLnNwbGljZShpLCAwLCBwYXR0ZXJuW2ldKVxuICAgICAgOiBvdXRwdXQuc3BsaWNlKGksIDEsIHRva2Vuc1t1bm1hc2tlZFtpXV0udHJhbnNmb3JtKG91dHB1dFtpXSkpXG4gIHJldHVybiBvdXRwdXQuam9pbihcIlwiKVxufVxuIiwiLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGF0dGVybj11bmRlZmluZWRdXG4gKiBAcmV0dXJucyB7c3RyaW5nfGludH1cbiAqL1xuZXhwb3J0IGNvbnN0IHVubWFza051bWJlciA9ICh2YWx1ZSwgcGF0dGVybikgPT4ge1xuICBsZXQgb3V0cHV0ID0gdmFsdWUucmVwbGFjZSgvXFxEL2csIFwiXCIpXG4gIGlmIChvdXRwdXQgJiYgXCJjdXJyZW5jeVwiID09PSBwYXR0ZXJuKSBvdXRwdXQgPSBvdXRwdXQgLyAxMDBcbiAgcmV0dXJuIG91dHB1dCB8fCAwXG59XG5cbi8qKlxuICogUmV2ZXJzZSBOdW1iZXIgRm9ybWF0XG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCByZXZlcnNlTnVtYmVyRm9ybWF0ID0gKHZhbHVlLCBsb2NhbGUpID0+IHtcbiAgY29uc3QgcGFydHMgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlKS5mb3JtYXRUb1BhcnRzKDExMTEuMSlcbiAgcmV0dXJuIHJldmVyc2VGb3JtYXQodmFsdWUsIHBhcnRzKVxufVxuXG4vKipcbiAqIFJldmVyc2UgQ3VycmVuY3kgRm9ybWF0XG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW5jeVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJldmVyc2VDdXJyZW5jeUZvcm1hdCA9ICh2YWx1ZSwgbG9jYWxlLCBjdXJyZW5jeSkgPT4ge1xuICBjb25zdCBwYXJ0cyA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIHtzdHlsZTogXCJjdXJyZW5jeVwiLCBjdXJyZW5jeX0pLmZvcm1hdFRvUGFydHMoMTExMS4xKVxuICBjb25zdCBzeW1ib2wgPSBwYXJ0cy5maW5kKHBhcnQgPT4gcGFydC50eXBlID09PSAnY3VycmVuY3knKS52YWx1ZVxuICBjb25zdCByZXZlcnNlZFZhbCA9IHZhbHVlLnJlcGxhY2Uoc3ltYm9sLCAnJylcbiAgcmV0dXJuIHJldmVyc2VGb3JtYXQocmV2ZXJzZWRWYWwsIHBhcnRzKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHthcnJheX0gcGFydHNcbiAqIEByZXR1cm5zIHtudW1iZXJ8bnVtYmVyfVxuICovXG5jb25zdCByZXZlcnNlRm9ybWF0ID0gKHZhbHVlLCBwYXJ0cykgPT4ge1xuICBjb25zdCBncm91cCA9IHBhcnRzLmZpbmQocGFydCA9PiBwYXJ0LnR5cGUgPT09ICdncm91cCcpLnZhbHVlXG4gIGNvbnN0IGRlY2ltYWwgPSBwYXJ0cy5maW5kKHBhcnQgPT4gcGFydC50eXBlID09PSAnZGVjaW1hbCcpLnZhbHVlXG4gIGxldCByZXZlcnNlZFZhbCA9IHZhbHVlXG4gICAgLnJlcGxhY2VBbGwoZ3JvdXAsICcnKVxuICAgIC5yZXBsYWNlKGRlY2ltYWwsICcuJylcbiAgcmV0dXJuIE51bWJlci5pc05hTihyZXZlcnNlZFZhbClcbiAgICA/IE5hTlxuICAgIDogK3JldmVyc2VkVmFsXG59XG4iLCIvKipcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3R5bGVdXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZV1cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBudW1iZXIgPSAoXG4gIHZhbHVlLFxuICBzdHlsZSxcbiAgey4uLm9wdGlvbnN9ID0ge30sXG4gIGxvY2FsZVxuKSA9PiB7XG4gIG9wdGlvbnMgPSB7Li4ub3B0aW9ucywgLi4uZ2V0T3B0aW9ucyhsb2NhbGUgfHwgXCJwdC1CUlwiKVtzdHlsZV19O1xuICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KHZhbHVlKVxufVxuXG4vKiBUbyBiZSB1cGRhdGVkIGJhc2VkIG9uIG5lZWQgLSBGcmVuY2ggLSBDYW5hZGEgYW5kIFVTIGxvY2FsZSBoYW5kbGVkICAqL1xuY29uc3QgY3VycmVuY3lUb0xvY2FsZSA9IG5ldyBNYXAoW1xuICBbXCJlbi1VU1wiLCBcIlVTRFwiXSxcbiAgW1wicHQtQlJcIiwgXCJCUkxcIl0sXG4gIFtcImZyLUNBXCIsIFwiQ0FEXCJdXG5dKVxuXG5jb25zdCBnZXRPcHRpb25zID0gbG9jYWxlID0+ICh7XG4gIGN1cnJlbmN5OiB7XG4gICAgc3R5bGU6IFwiY3VycmVuY3lcIixcbiAgICBjdXJyZW5jeTogY3VycmVuY3lUb0xvY2FsZS5nZXQobG9jYWxlKVxuICB9LFxuICBkZWNpbWFsOiB7fSxcbiAgcGVyY2VudDoge31cbn0pXG4iLCJpbXBvcnQge251bWJlcn0gZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8aW50fSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtzdHlsZT1cImN1cnJlbmN5XCJdXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZV1cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBjdXJyZW5jeSA9IChcbiAgdmFsdWUsXG4gIHN0eWxlID0gXCJjdXJyZW5jeVwiLFxuICB7Li4ub3B0aW9uc30gPSB7fSxcbiAgbG9jYWxlLFxuKSA9PiB7XG4gIHJldHVybiBudW1iZXIocGFyc2VGbG9hdCh2YWx1ZSksIHN0eWxlLCBvcHRpb25zLCBsb2NhbGUpXG59XG4iLCJpbXBvcnQge21hc2t9IGZyb20gXCIuL21hc2suanNcIlxuXG5jb25zdCBtYXNrRGF0ZU1hcCA9IHtcbiAgZ2V0Q29tcHV0ZWREYXRlOiAodmFsdWUsIGluaXRpYWxEYXRlID0gXCIwMS8wMS8xOTcwXCIucmVwbGFjZSgvXFxEL2csIFwiXCIpKSA9PiB7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXEQvZywgXCJcIilcbiAgICByZXR1cm4gdmFsdWUgKyBpbml0aWFsRGF0ZS5zbGljZSh2YWx1ZS5sZW5ndGgpXG4gIH0sXG4gIGdldE1hc2tlZERhdGU6ICh2YWx1ZSwgcGF0dGVybikgPT4gbWFzayh2YWx1ZSwgcGF0dGVybilcbn1cblxuLyoqXG4gKiBHZXQgRGF0ZSBNYXNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBtYXNrRGF0ZSA9ICh2YWx1ZSwgcGF0dGVybikgPT4ge1xuICBjb25zdCBkYXRlT2JqZWN0ID0gZGF0ZShcbiAgICBtYXNrRGF0ZU1hcC5nZXRNYXNrZWREYXRlKFxuICAgICAgbWFza0RhdGVNYXAuZ2V0Q29tcHV0ZWREYXRlKHZhbHVlKSxcbiAgICAgIHBhdHRlcm5cbiAgICApXG4gIClcbiAgcmV0dXJuIG1hc2soaXNOYU4oZGF0ZU9iamVjdC52YWx1ZU9mKCkpID8gdmFsdWUuc2xpY2UoMCwgLTEpIDogdmFsdWUsIHBhdHRlcm4pXG59XG5cbmNvbnN0IGRhdGVQYXR0ZXJuTWFwID0ge1xuICBwYXJ0czogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5mb3JtYXRUb1BhcnRzKCksXG4gIG1hc2s6IFwiXCIsXG4gIHBsYWNlaG9sZGVyOiBcIlwiXG59XG5cbi8qKlxuICogR2V0IERhdGUgUGF0dGVyblxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldERhdGVQYXR0ZXJuID0gKCkgPT4ge1xuICBkYXRlUGF0dGVybk1hcC5wYXJ0cy5mb3JFYWNoKCh7dHlwZSwgdmFsdWV9KSA9PiB7XG4gICAgaWYgKHR5cGUgPT09IFwibW9udGhcIikgKGRhdGVQYXR0ZXJuTWFwLm1hc2sgKz0gXCJkZFwiKSAmJiAoZGF0ZVBhdHRlcm5NYXAucGxhY2Vob2xkZXIgKz0gXCJfX1wiKVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiZGF5XCIpIChkYXRlUGF0dGVybk1hcC5tYXNrICs9IFwiZGRcIikgJiYgKGRhdGVQYXR0ZXJuTWFwLnBsYWNlaG9sZGVyICs9IFwiX19cIilcbiAgICBlbHNlIGlmICh0eXBlID09PSBcInllYXJcIikgKGRhdGVQYXR0ZXJuTWFwLm1hc2sgKz0gXCJkZGRkXCIpICYmIChkYXRlUGF0dGVybk1hcC5wbGFjZWhvbGRlciArPSBcIl9fX19cIilcbiAgICBlbHNlIGlmICh0eXBlID09PSBcImxpdGVyYWxcIikgKGRhdGVQYXR0ZXJuTWFwLm1hc2sgKz0gdmFsdWUpICYmIChkYXRlUGF0dGVybk1hcC5wbGFjZWhvbGRlciArPSB2YWx1ZSlcbiAgfSlcbiAgY29uc3Qgb2JqID0ge21hc2s6IGRhdGVQYXR0ZXJuTWFwLm1hc2ssIHBsYWNlaG9sZGVyOiBkYXRlUGF0dGVybk1hcC5wbGFjZWhvbGRlcn1cbiAgZGF0ZVBhdHRlcm5NYXAubWFzayA9IFwiXCJcbiAgZGF0ZVBhdHRlcm5NYXAucGxhY2Vob2xkZXIgPSBcIlwiXG4gIHJldHVybiBvYmpcbn1cblxuY29uc3QgZGF0ZU1hcCA9IHtcbiAgcGFydHM6IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkuZm9ybWF0VG9QYXJ0cygpLFxuICB2YWx1ZUFycmF5OiBbXSxcbiAgZGF0ZUZvcm1hdDogKG1vbnRoLCBkYXksIHllYXIpID0+IGAke21vbnRofS8ke2RheX0vJHt5ZWFyfWBcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZT11bmRlZmluZWRdXG4gKiBAcmV0dXJucyB7RGF0ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGUgPSAodmFsdWUsIGxvY2FsZSA9IHVuZGVmaW5lZCkgPT4ge1xuICBkYXRlTWFwLnZhbHVlQXJyYXkgPSB2YWx1ZS5zcGxpdChcIi9cIilcbiAgY29uc3Qge21vbnRoLCBkYXksIHllYXJ9ID0ge1xuICAgICAgW2RhdGVNYXAucGFydHNbMF0udHlwZV06IGRhdGVNYXAudmFsdWVBcnJheVswXSxcbiAgICAgIFtkYXRlTWFwLnBhcnRzWzJdLnR5cGVdOiBkYXRlTWFwLnZhbHVlQXJyYXlbMV0sXG4gICAgICBbZGF0ZU1hcC5wYXJ0c1s0XS50eXBlXTogZGF0ZU1hcC52YWx1ZUFycmF5WzJdXG4gICAgfVxuICByZXR1cm4gbmV3IERhdGUoZGF0ZU1hcC5kYXRlRm9ybWF0KG1vbnRoLCBkYXksIHllYXIpKVxufVxuIiwiaW1wb3J0IHttYXNrfSBmcm9tIFwiLi9tYXNrLmpzXCI7XG5pbXBvcnQge3VubWFza051bWJlcn0gZnJvbSBcIi4vdW5tYXNrTnVtYmVyLmpzXCJcbmltcG9ydCB7Y3VycmVuY3l9IGZyb20gXCIuL2N1cnJlbmN5LmpzXCI7XG5pbXBvcnQge2dldERhdGVQYXR0ZXJuLCBtYXNrRGF0ZX0gZnJvbSBcIi4vZGF0ZS5qc1wiO1xuXG4vKipcbiAqIG1hc2tJbnB1dFxuICogQHBhcmFtIHtzdHJpbmd8SFRNTElucHV0RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IFNlbGVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0dGVybnMgZGVjaW1hbHxjdXJyZW5jeVxuICovXG5leHBvcnQgY29uc3QgaW5wdXQgPSAoZWxlbWVudCwgcGF0dGVybnMpID0+IHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHBhdHRlcm5zKSkgdGhyb3cgUmVmZXJlbmNlRXJyb3IoXCJQYXR0ZXJuIGlzIG5vdCBhcnJheVwiKVxuICBpZiAoIXBhdHRlcm5zKSB0aHJvdyBSZWZlcmVuY2VFcnJvcihcIk1pc3Npbmcgc2Vjb25kIHBhcmFtZXRlciBwYXR0ZXJuLlwiKVxuXG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gXCJzdHJpbmdcIikgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudClcbiAgbGV0IFtwYXR0ZXJuLCBkeW5hbWljUGF0dGVybl0gPSBwYXR0ZXJuc1xuICBsZXQgbGlzdGVuZXJcblxuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlIFwiY3VycmVuY3lcIjoge1xuICAgICAgbGlzdGVuZXIgPSAoKSA9PiBlbGVtZW50LnZhbHVlID0gY3VycmVuY3kodW5tYXNrTnVtYmVyKGVsZW1lbnQudmFsdWUsIHBhdHRlcm4pLCBwYXR0ZXJuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY2FzZSBcImRhdGVcIjoge1xuICAgICAgY29uc3Qge21hc2ssIHBsYWNlaG9sZGVyfSA9IGdldERhdGVQYXR0ZXJuKClcbiAgICAgIGVsZW1lbnQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlclxuICAgICAgZWxlbWVudC5taW5MZW5ndGggPSBlbGVtZW50Lm1heExlbmd0aCA9IHBhdHRlcm4ubGVuZ3RoXG4gICAgICBlbGVtZW50LnBhdHRlcm4gPSBgLnske3BhdHRlcm4ubGVuZ3RofSwke3BhdHRlcm4ubGVuZ3RofX1gXG4gICAgICBsaXN0ZW5lciA9ICgpID0+IGVsZW1lbnQudmFsdWUgPSBtYXNrRGF0ZShlbGVtZW50LnZhbHVlLCBtYXNrKVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgcGF0dGVybnMuc29ydCgoYSwgYikgPT4gYS5sZW5ndGggLSBiLmxlbmd0aClcbiAgICAgIGVsZW1lbnQubWluTGVuZ3RoID0gcGF0dGVybi5sZW5ndGhcbiAgICAgIGVsZW1lbnQubWF4TGVuZ3RoID0gZHluYW1pY1BhdHRlcm4/Lmxlbmd0aCB8fCBlbGVtZW50Lm1pbkxlbmd0aFxuICAgICAgZWxlbWVudC5wYXR0ZXJuID0gYC57JHtwYXR0ZXJuLmxlbmd0aH0sJHtkeW5hbWljUGF0dGVybj8ubGVuZ3RoIHx8IHBhdHRlcm4ubGVuZ3RofX1gXG5cbiAgICAgIGxpc3RlbmVyID0gZHluYW1pY1BhdHRlcm5cbiAgICAgICAgPyAoKSA9PiBlbGVtZW50LnZhbHVlID0gbWFzayhcbiAgICAgICAgICBlbGVtZW50LnZhbHVlLFxuICAgICAgICAgIGVsZW1lbnQudmFsdWUubGVuZ3RoIDw9IGVsZW1lbnQubWluTGVuZ3RoID8gcGF0dGVybiA6IGR5bmFtaWNQYXR0ZXJuXG4gICAgICAgIClcbiAgICAgICAgOiAoKSA9PiBlbGVtZW50LnZhbHVlID0gbWFzayhlbGVtZW50LnZhbHVlLCBwYXR0ZXJuKVxuICAgIH1cbiAgfVxuICBlbGVtZW50LnZhbHVlICYmIGxpc3RlbmVyKClcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgbGlzdGVuZXIpXG59XG4iLCJpbXBvcnQge21hc2t9IGZyb20gXCIuL21hc2suanNcIlxuaW1wb3J0IHt1bm1hc2t9IGZyb20gXCIuL3VubWFzay5qc1wiXG5pbXBvcnQge2lucHV0fSBmcm9tIFwiLi9pbnB1dC5qc1wiXG5pbXBvcnQge3ByZXBhcmVNYXNrSW5wdXRzfSBmcm9tIFwiLi9wcmVwYXJlTWFza0lucHV0cy5qc1wiXG5pbXBvcnQge3VubWFza051bWJlciwgcmV2ZXJzZU51bWJlckZvcm1hdCwgcmV2ZXJzZUN1cnJlbmN5Rm9ybWF0fSBmcm9tIFwiLi91bm1hc2tOdW1iZXIuanNcIlxuaW1wb3J0IHtkYXRlfSBmcm9tIFwiLi9kYXRlLmpzXCJcbmltcG9ydCB7bnVtYmVyfSBmcm9tIFwiLi9udW1iZXIuanNcIlxuaW1wb3J0IHtjdXJyZW5jeX0gZnJvbSBcIi4vY3VycmVuY3kuanNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1hc2ssIHVubWFzaywgaW5wdXQsIHByZXBhcmVNYXNrSW5wdXRzLCBudW1iZXIsIGN1cnJlbmN5LCBkYXRlLFxuICB1bm1hc2tOdW1iZXIsIHJldmVyc2VOdW1iZXJGb3JtYXQsIHJldmVyc2VDdXJyZW5jeUZvcm1hdFxufVxuIiwiaW1wb3J0IHtpbnB1dH0gZnJvbSBcIi4vaW5wdXQuanNcIjtcblxuLyoqXG4gKiBNYXNrIGFsbCBpbnB1dHMgd2hhdCBoYXZlIGRhdGEtaW5kZXggYXR0cmlidXRlXG4gKi9cbmV4cG9ydCBjb25zdCBwcmVwYXJlTWFza0lucHV0cyA9ICgpID0+IHtcbiAgY29uc3QgZGF0YXNldFRvT2JqZWN0ID0gdmFsdWUgPT4gSlNPTi5wYXJzZSh2YWx1ZS5yZXBsYWNlKC8nL2csIFwiXFxcIlwiKSk7XG4gIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtbWFza11cIildXG4gICAgLmZvckVhY2goZWwgPT4gaW5wdXQoZWwsIGRhdGFzZXRUb09iamVjdChlbC5kYXRhc2V0Lm1hc2spKSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=