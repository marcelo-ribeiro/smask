var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Z:()=>y});const r={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},a=(e,t)=>e?(e=e.replace(/\W/gi,""),t?e.slice(0,t.replace(/\W/gi,"").length):e):e,n=(e,t)=>{if(!e||!t)return e;let n="";for(let l=a(e,t),o=a(t),s=0,c=0,u=t.length;s<u&&l[c];s++){const e=r[o[c]],a=t[s],u=l[c];if(!e.test(u))break;/\W/.test(a)?n+=a:(n+=e.transform(u),c++)}return n},l=(e,t)=>{let r=e.replace(/\D/g,"");return r&&"currency"===t&&(r/=100),r||0},o=(e,t)=>{const r=t.find((e=>"group"===e.type)).value,a=t.find((e=>"decimal"===e.type)).value;let n=e.replaceAll(r,"").replace(a,".");return Number.isNaN(n)?NaN:+n},s=(e,t,{...r}={},a)=>(r={...r,...u(a||"pt-BR")[t]},new Intl.NumberFormat(a,r).format(e)),c=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),u=e=>({currency:{style:"currency",currency:c.get(e)},decimal:{},percent:{}}),m=(e,t="currency",{...r}={},a)=>s(parseFloat(e),t,r,a),p=e=>new Intl.DateTimeFormat(e).formatToParts(),g="01/01/1970".replace(/\D/g,""),i=(e,t)=>{const r=e.split("/"),{month:a,day:n,year:l}={[p(t)[0].type]:r[0],[p(t)[2].type]:r[1],[p(t)[4].type]:r[2]};return new Date(`${a}/${n}/${l}`)},h=new Map,d=(e,t)=>{if(!Array.isArray(t))throw ReferenceError("Pattern is not an array");if(!t)throw ReferenceError("Missing second parameter pattern.");const r="object"==typeof e?e:document.querySelector(e);if(!r)throw Error("Element not found.");h.set(r,{}),t.length>1&&t.sort(((e,t)=>e.length-t.length));let[a,o]=t,s=()=>{};switch(a){case"currency":r.placeholder=m(0),s=()=>r.value=m(l(r.value,a),a);break;case"date":{const e=(e=>{let t="";return p(void 0).forEach((({type:e,value:r})=>{"month"===e||"day"===e?t+="dd":"year"===e?t+="dddd":"literal"===e&&(t+=r)})),t})();r.minLength=r.maxLength=r.minlength=r.maxlength=e.length,r.pattern=`.{${e.length},${e.length}}`,s=()=>{r.value=((e,t,r)=>{const a=i(((e,t)=>n(e,t))((l=(l=e.value).replace(/\D/g,""))+g.slice(l.length),t),r);var l;return n(isNaN(a.valueOf())?h.get(e).oldValue:e.value,t)})(r,e),((e,t={})=>{h.set(e,{...h.get(e),...t})})(r,{oldValue:r.value})};break}default:r.minLength=r.minlength=a.length,r.maxLength=r.maxlength=o?.length||a.length,r.pattern=`.{${a.length},${o?.length||a.length}}`,s=o?()=>{r.value=n(r.value,r.value.length<=a.length?a:o)}:()=>r.value=n(r.value,a)}r.value&&s(),r.addEventListener("input",s)},y={mask:n,unmask:a,input:d,prepareMaskInputs:()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>{return d(e,(t=e.dataset.mask,JSON.parse(t.replace(/'/g,'"'))));var t}))},number:s,currency:m,date:i,unmaskNumber:l,reverseNumberFormat:(e,t)=>{const r=new Intl.NumberFormat(t).formatToParts(1111.1);return o(e,r)},reverseCurrencyFormat:(e,t,r)=>{const a=new Intl.NumberFormat(t,{style:"currency",currency:r}).formatToParts(1111.1),n=a.find((e=>"currency"===e.type)).value,l=e.replace(n,"");return o(l,a)}};var f=t.Z;export{f as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBUUcsT0FBU0gsRUFBVStELElBR2xELElBQU9QLEVBQUd6RCxNQUFRSyxFQUFLb0QsRUFBR3pELE1BQU9DLEdBR3pDd0QsRUFBR3pELE9BQVNpRSxJQUNaUixFQUFHc0IsaUJBQWlCLFFBQVNkLElDdkQvQixHQUNFNUQsS0FBSSxFQUNKTixPQUFNLEVBQ05RLE1BQUssRUFDTHlFLGtCQ1orQixLQUMvQixJQUFJdEIsU0FBU3VCLGlCQUFpQixnQkFBZ0JiLFNBQVNYLElBQ3JEbEQsT0FBQUEsRUFBTWtELEdBSWV6RCxFQUpLeUQsRUFBR3lCLFFBQVE3RSxLQUlOOEUsS0FBS0MsTUFBTXBGLEVBQU1FLFFBQVEsS0FBTSxRQUExQyxJQUFDRixNRE92QjRCLE9BQU0sRUFDTlUsU0FBUSxFQUNSTyxLQUFJLEVBQ0o5QixhQUFZLEVBQ1pzRSxvQkxMaUMsQ0FBQ3JGLEVBQU8rQixLQUN6QyxNQUFNZCxFQUFRLElBQUlnQixLQUFLQyxhQUFhSCxHQUFRWSxjQUFjLFFBQzFELE9BQU8zQixFQUFjaEIsRUFBT2lCLElLSTVCcUUsc0JMTW1DLENBQUN0RixFQUFPK0IsRUFBUU8sS0FDbkQsTUFBTXJCLEVBQVEsSUFBSWdCLEtBQUtDLGFBQWFILEVBQVEsQ0FDMUNGLE1BQU8sV0FDUFMsU0FBQUEsSUFDQ0ssY0FBYyxRQUNYNEMsRUFBU3RFLEVBQU1FLE1BQU1DLEdBQXVCLGFBQWRBLEVBQUtDLE9BQXFCckIsTUFDeER1QixFQUFjdkIsRUFBTUUsUUFBUXFGLEVBQVEsSUFDMUMsT0FBT3ZFLEVBQWNPLEVBQWFOLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFzay93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zbWFzay93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc21hc2svd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy90b2tlbnMuanMiLCJ3ZWJwYWNrOi8vc21hc2svLi9zcmMvdW5tYXNrLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL21hc2suanMiLCJ3ZWJwYWNrOi8vc21hc2svLi9zcmMvdW5tYXNrTnVtYmVyLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9jdXJyZW5jeS5qcyIsIndlYnBhY2s6Ly9zbWFzay8uL3NyYy9kYXRlLmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL2lucHV0LmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3NtYXNrLy4vc3JjL3ByZXBhcmVNYXNrSW5wdXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiZXhwb3J0IGNvbnN0IHRva2VucyA9IHtcbiAgZDogeyB0ZXN0OiAodikgPT4gL1xcZC8udGVzdCh2KSwgdHJhbnNmb3JtOiAodikgPT4gdiB9LFxuICBhOiB7IHRlc3Q6ICh2KSA9PiAvW2Etel0vaS50ZXN0KHYpLCB0cmFuc2Zvcm06ICh2KSA9PiB2LnRvTG93ZXJDYXNlKCkgfSxcbiAgQTogeyB0ZXN0OiAodikgPT4gL1thLXpdL2kudGVzdCh2KSwgdHJhbnNmb3JtOiAodikgPT4gdi50b1VwcGVyQ2FzZSgpIH0sXG4gIHc6IHsgdGVzdDogKHYpID0+IC9cXHcvLnRlc3QodiksIHRyYW5zZm9ybTogKHYpID0+IHYudG9Mb3dlckNhc2UoKSB9LFxuICBXOiB7IHRlc3Q6ICh2KSA9PiAvXFx3Ly50ZXN0KHYpLCB0cmFuc2Zvcm06ICh2KSA9PiB2LnRvVXBwZXJDYXNlKCkgfSxcbn07XG4iLCIvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXR0ZXJuPVwiXCJdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgdW5tYXNrID0gKHZhbHVlLCBwYXR0ZXJuKSA9PiB7XG4gIGlmICghdmFsdWUpIHJldHVybiB2YWx1ZTtcbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFcvZ2ksIFwiXCIpO1xuICByZXR1cm4gcGF0dGVybiA/IHZhbHVlLnNsaWNlKDAsIHBhdHRlcm4ucmVwbGFjZSgvXFxXL2dpLCBcIlwiKS5sZW5ndGgpIDogdmFsdWU7XG59O1xuIiwiaW1wb3J0IHsgdG9rZW5zIH0gZnJvbSBcIi4vdG9rZW5zLmpzXCI7XG5pbXBvcnQgeyB1bm1hc2sgfSBmcm9tIFwiLi91bm1hc2suanNcIjtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgbWFzayA9ICh2YWx1ZSwgcGF0dGVybikgPT4ge1xuICBpZiAoIXZhbHVlIHx8ICFwYXR0ZXJuKSByZXR1cm4gdmFsdWU7XG5cbiAgbGV0IG91dHB1dCA9IFwiXCI7XG5cbiAgZm9yIChcbiAgICBsZXQgaW5wdXQgPSB1bm1hc2sodmFsdWUsIHBhdHRlcm4pLFxuICAgICAgdW5tYXNrZWQgPSB1bm1hc2socGF0dGVybiksXG4gICAgICBpID0gMCxcbiAgICAgIGlpID0gMCxcbiAgICAgIHBsID0gcGF0dGVybi5sZW5ndGg7XG4gICAgaSA8IHBsICYmIGlucHV0W2lpXTtcbiAgICBpKytcbiAgKSB7XG4gICAgY29uc3QgdG9rZW4gPSB0b2tlbnNbdW5tYXNrZWRbaWldXSxcbiAgICAgIHBhdHRlcm5DaGFyID0gcGF0dGVybltpXSxcbiAgICAgIGlucHV0Q2hhciA9IGlucHV0W2lpXTtcblxuICAgIGlmICghdG9rZW4udGVzdChpbnB1dENoYXIpKSBicmVhaztcbiAgICBlbHNlIGlmICgvXFxXLy50ZXN0KHBhdHRlcm5DaGFyKSkgb3V0cHV0ICs9IHBhdHRlcm5DaGFyO1xuICAgIGVsc2UgKG91dHB1dCArPSB0b2tlbi50cmFuc2Zvcm0oaW5wdXRDaGFyKSksIGlpKys7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufTtcbiIsIi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhdHRlcm49dW5kZWZpbmVkXVxuICogQHJldHVybnMge3N0cmluZ3xpbnR9XG4gKi9cbmV4cG9ydCBjb25zdCB1bm1hc2tOdW1iZXIgPSAodmFsdWUsIHBhdHRlcm4pID0+IHtcbiAgbGV0IG91dHB1dCA9IHZhbHVlLnJlcGxhY2UoL1xcRC9nLCBcIlwiKTtcbiAgaWYgKG91dHB1dCAmJiBcImN1cnJlbmN5XCIgPT09IHBhdHRlcm4pIG91dHB1dCA9IG91dHB1dCAvIDEwMDtcbiAgcmV0dXJuIG91dHB1dCB8fCAwO1xufTtcblxuLyoqXG4gKiBSZXZlcnNlIE51bWJlciBGb3JtYXRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJldmVyc2VOdW1iZXJGb3JtYXQgPSAodmFsdWUsIGxvY2FsZSkgPT4ge1xuICBjb25zdCBwYXJ0cyA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUpLmZvcm1hdFRvUGFydHMoMTExMS4xKTtcbiAgcmV0dXJuIHJldmVyc2VGb3JtYXQodmFsdWUsIHBhcnRzKTtcbn07XG5cbi8qKlxuICogUmV2ZXJzZSBDdXJyZW5jeSBGb3JtYXRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbmN5XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgcmV2ZXJzZUN1cnJlbmN5Rm9ybWF0ID0gKHZhbHVlLCBsb2NhbGUsIGN1cnJlbmN5KSA9PiB7XG4gIGNvbnN0IHBhcnRzID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwge1xuICAgIHN0eWxlOiBcImN1cnJlbmN5XCIsXG4gICAgY3VycmVuY3ksXG4gIH0pLmZvcm1hdFRvUGFydHMoMTExMS4xKTtcbiAgY29uc3Qgc3ltYm9sID0gcGFydHMuZmluZCgocGFydCkgPT4gcGFydC50eXBlID09PSBcImN1cnJlbmN5XCIpLnZhbHVlO1xuICBjb25zdCByZXZlcnNlZFZhbCA9IHZhbHVlLnJlcGxhY2Uoc3ltYm9sLCBcIlwiKTtcbiAgcmV0dXJuIHJldmVyc2VGb3JtYXQocmV2ZXJzZWRWYWwsIHBhcnRzKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge2FycmF5fSBwYXJ0c1xuICogQHJldHVybnMge251bWJlcnxudW1iZXJ9XG4gKi9cbmNvbnN0IHJldmVyc2VGb3JtYXQgPSAodmFsdWUsIHBhcnRzKSA9PiB7XG4gIGNvbnN0IGdyb3VwID0gcGFydHMuZmluZCgocGFydCkgPT4gcGFydC50eXBlID09PSBcImdyb3VwXCIpLnZhbHVlO1xuICBjb25zdCBkZWNpbWFsID0gcGFydHMuZmluZCgocGFydCkgPT4gcGFydC50eXBlID09PSBcImRlY2ltYWxcIikudmFsdWU7XG4gIGxldCByZXZlcnNlZFZhbCA9IHZhbHVlLnJlcGxhY2VBbGwoZ3JvdXAsIFwiXCIpLnJlcGxhY2UoZGVjaW1hbCwgXCIuXCIpO1xuICByZXR1cm4gTnVtYmVyLmlzTmFOKHJldmVyc2VkVmFsKSA/IE5hTiA6ICtyZXZlcnNlZFZhbDtcbn07XG4iLCIvKipcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3R5bGVdXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZV1cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBudW1iZXIgPSAodmFsdWUsIHN0eWxlLCB7IC4uLm9wdGlvbnMgfSA9IHt9LCBsb2NhbGUpID0+IHtcbiAgb3B0aW9ucyA9IHsgLi4ub3B0aW9ucywgLi4uZ2V0T3B0aW9ucyhsb2NhbGUgfHwgXCJwdC1CUlwiKVtzdHlsZV0gfTtcbiAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSk7XG59O1xuXG4vKiBUbyBiZSB1cGRhdGVkIGJhc2VkIG9uIG5lZWQgLSBGcmVuY2ggLSBDYW5hZGEgYW5kIFVTIGxvY2FsZSBoYW5kbGVkICAqL1xuY29uc3QgY3VycmVuY3lUb0xvY2FsZSA9IG5ldyBNYXAoW1xuICBbXCJlbi1VU1wiLCBcIlVTRFwiXSxcbiAgW1wicHQtQlJcIiwgXCJCUkxcIl0sXG4gIFtcImZyLUNBXCIsIFwiQ0FEXCJdLFxuXSk7XG5cbmNvbnN0IGdldE9wdGlvbnMgPSAobG9jYWxlKSA9PiAoe1xuICBjdXJyZW5jeToge1xuICAgIHN0eWxlOiBcImN1cnJlbmN5XCIsXG4gICAgY3VycmVuY3k6IGN1cnJlbmN5VG9Mb2NhbGUuZ2V0KGxvY2FsZSksXG4gIH0sXG4gIGRlY2ltYWw6IHt9LFxuICBwZXJjZW50OiB7fSxcbn0pO1xuIiwiaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8aW50fSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtzdHlsZT1cImN1cnJlbmN5XCJdXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZV1cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBjdXJyZW5jeSA9IChcbiAgdmFsdWUsXG4gIHN0eWxlID0gXCJjdXJyZW5jeVwiLFxuICB7IC4uLm9wdGlvbnMgfSA9IHt9LFxuICBsb2NhbGVcbikgPT4ge1xuICByZXR1cm4gbnVtYmVyKHBhcnNlRmxvYXQodmFsdWUpLCBzdHlsZSwgb3B0aW9ucywgbG9jYWxlKTtcbn07XG4iLCJpbXBvcnQgeyBtYXNrIH0gZnJvbSBcIi4vbWFzay5qc1wiO1xuaW1wb3J0IHsgZWxlbWVudHMgfSBmcm9tIFwiLi9pbnB1dC5qc1wiO1xuXG5jb25zdCBkYXRlUGFydHMgPSAobG9jYWxlKSA9PiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUpLmZvcm1hdFRvUGFydHMoKTtcbmNvbnN0IGluaXRpYWxEYXRlID0gXCIwMS8wMS8xOTcwXCIucmVwbGFjZSgvXFxEL2csIFwiXCIpO1xuY29uc3QgZ2V0TWFza2VkRGF0ZSA9ICh2YWx1ZSwgcGF0dGVybikgPT4gbWFzayh2YWx1ZSwgcGF0dGVybik7XG5jb25zdCBnZXRDb21wdXRlZERhdGUgPSAodmFsdWUpID0+IHtcbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gIHJldHVybiB2YWx1ZSArIGluaXRpYWxEYXRlLnNsaWNlKHZhbHVlLmxlbmd0aCk7XG59O1xuXG4vKipcbiAqIEdldCBEYXRlIE1hc2tlZFxuICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGU9dW5kZWZpbmVkXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IG1hc2tEYXRlID0gKGVsZW1lbnQsIHBhdHRlcm4sIGxvY2FsZSA9IHVuZGVmaW5lZCkgPT4ge1xuICBjb25zdCBkYXRlT2JqZWN0ID0gZGF0ZShcbiAgICBnZXRNYXNrZWREYXRlKGdldENvbXB1dGVkRGF0ZShlbGVtZW50LnZhbHVlKSwgcGF0dGVybiksXG4gICAgbG9jYWxlXG4gICk7XG4gIHJldHVybiBtYXNrKFxuICAgIGlzTmFOKGRhdGVPYmplY3QudmFsdWVPZigpKVxuICAgICAgPyBlbGVtZW50cy5nZXQoZWxlbWVudCkub2xkVmFsdWVcbiAgICAgIDogZWxlbWVudC52YWx1ZSxcbiAgICBwYXR0ZXJuXG4gICk7XG59O1xuXG4vKipcbiAqIEdldCBEYXRlIFBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYWxlPXVuZGVmaW5lZF1cbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXREYXRlUGF0dGVybiA9IChsb2NhbGUgPSB1bmRlZmluZWQpID0+IHtcbiAgbGV0IHBhdHRlcm4gPSBcIlwiO1xuICBkYXRlUGFydHMobG9jYWxlKS5mb3JFYWNoKCh7IHR5cGUsIHZhbHVlIH0pID0+IHtcbiAgICBpZiAodHlwZSA9PT0gXCJtb250aFwiIHx8IHR5cGUgPT09IFwiZGF5XCIpIHBhdHRlcm4gKz0gXCJkZFwiO1xuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwieWVhclwiKSBwYXR0ZXJuICs9IFwiZGRkZFwiO1xuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwibGl0ZXJhbFwiKSBwYXR0ZXJuICs9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHBhdHRlcm47XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGU9dW5kZWZpbmVkXVxuICogQHJldHVybnMge0RhdGV9XG4gKi9cbmV4cG9ydCBjb25zdCBkYXRlID0gKHZhbHVlLCBsb2NhbGUgPSB1bmRlZmluZWQpID0+IHtcbiAgY29uc3QgdmFsdWVBcnJheSA9IHZhbHVlLnNwbGl0KFwiL1wiKTtcbiAgY29uc3QgeyBtb250aCwgZGF5LCB5ZWFyIH0gPSB7XG4gICAgW2RhdGVQYXJ0cyhsb2NhbGUpWzBdLnR5cGVdOiB2YWx1ZUFycmF5WzBdLFxuICAgIFtkYXRlUGFydHMobG9jYWxlKVsyXS50eXBlXTogdmFsdWVBcnJheVsxXSxcbiAgICBbZGF0ZVBhcnRzKGxvY2FsZSlbNF0udHlwZV06IHZhbHVlQXJyYXlbMl0sXG4gIH07XG4gIGNvbnN0IGRhdGVGb3JtYXQgPSBgJHttb250aH0vJHtkYXl9LyR7eWVhcn1gO1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZUZvcm1hdCk7XG59O1xuIiwiaW1wb3J0IHsgbWFzayB9IGZyb20gXCIuL21hc2suanNcIjtcbmltcG9ydCB7IHVubWFza051bWJlciB9IGZyb20gXCIuL3VubWFza051bWJlci5qc1wiO1xuaW1wb3J0IHsgY3VycmVuY3kgfSBmcm9tIFwiLi9jdXJyZW5jeS5qc1wiO1xuaW1wb3J0IHsgZ2V0RGF0ZVBhdHRlcm4sIG1hc2tEYXRlIH0gZnJvbSBcIi4vZGF0ZS5qc1wiO1xuXG5leHBvcnQgY29uc3QgZWxlbWVudHMgPSBuZXcgTWFwKCk7XG5jb25zdCBzZXRFbGVtZW50cyA9IChlbGVtZW50LCBvcHRpb25zID0ge30pID0+XG4gIGVsZW1lbnRzLnNldChlbGVtZW50LCB7XG4gICAgLi4uZWxlbWVudHMuZ2V0KGVsZW1lbnQpLFxuICAgIC4uLm9wdGlvbnMsXG4gIH0pO1xuXG4vKipcbiAqIG1hc2tJbnB1dFxuICogQHBhcmFtIHtzdHJpbmd8SFRNTElucHV0RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IFNlbGVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0dGVybnMgZGVjaW1hbHxjdXJyZW5jeVxuICovXG5leHBvcnQgY29uc3QgaW5wdXQgPSAoZWxlbWVudCwgcGF0dGVybnMpID0+IHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHBhdHRlcm5zKSkgdGhyb3cgUmVmZXJlbmNlRXJyb3IoXCJQYXR0ZXJuIGlzIG5vdCBhbiBhcnJheVwiKTtcbiAgaWYgKCFwYXR0ZXJucykgdGhyb3cgUmVmZXJlbmNlRXJyb3IoXCJNaXNzaW5nIHNlY29uZCBwYXJhbWV0ZXIgcGF0dGVybi5cIik7XG5cbiAgY29uc3QgZWwgPVxuICAgIHR5cGVvZiBlbGVtZW50ID09PSBcIm9iamVjdFwiID8gZWxlbWVudCA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCk7XG4gIGlmICghZWwpIHRocm93IEVycm9yKFwiRWxlbWVudCBub3QgZm91bmQuXCIpO1xuICBlbGVtZW50cy5zZXQoZWwsIHt9KTtcbiAgaWYgKHBhdHRlcm5zLmxlbmd0aCA+IDEpIHBhdHRlcm5zLnNvcnQoKGEsIGIpID0+IGEubGVuZ3RoIC0gYi5sZW5ndGgpO1xuICBsZXQgW3BhdHRlcm4sIGR5bmFtaWNQYXR0ZXJuXSA9IHBhdHRlcm5zO1xuICBsZXQgbGlzdGVuZXIgPSAoKSA9PiB7fTtcblxuICAvLyBJbml0aWFsaXplIGlucHV0IGxpc3RlbmVyIGJ5IG1hc2tcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSBcImN1cnJlbmN5XCI6IHtcbiAgICAgIGVsLnBsYWNlaG9sZGVyID0gY3VycmVuY3koMCk7XG4gICAgICBsaXN0ZW5lciA9ICgpID0+XG4gICAgICAgIChlbC52YWx1ZSA9IGN1cnJlbmN5KHVubWFza051bWJlcihlbC52YWx1ZSwgcGF0dGVybiksIHBhdHRlcm4pKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGF0ZVwiOiB7XG4gICAgICBjb25zdCBwYXR0ZXJuID0gZ2V0RGF0ZVBhdHRlcm4oKTtcbiAgICAgIGVsLm1pbkxlbmd0aCA9XG4gICAgICAgIGVsLm1heExlbmd0aCA9XG4gICAgICAgIGVsLm1pbmxlbmd0aCA9XG4gICAgICAgIGVsLm1heGxlbmd0aCA9XG4gICAgICAgICAgcGF0dGVybi5sZW5ndGg7XG4gICAgICBlbC5wYXR0ZXJuID0gYC57JHtwYXR0ZXJuLmxlbmd0aH0sJHtwYXR0ZXJuLmxlbmd0aH19YDtcbiAgICAgIGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBlbC52YWx1ZSA9IG1hc2tEYXRlKGVsLCBwYXR0ZXJuKTtcbiAgICAgICAgc2V0RWxlbWVudHMoZWwsIHsgb2xkVmFsdWU6IGVsLnZhbHVlIH0pO1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICBlbC5taW5MZW5ndGggPSBlbC5taW5sZW5ndGggPSBwYXR0ZXJuLmxlbmd0aDtcbiAgICAgIGVsLm1heExlbmd0aCA9IGVsLm1heGxlbmd0aCA9IGR5bmFtaWNQYXR0ZXJuPy5sZW5ndGggfHwgcGF0dGVybi5sZW5ndGg7XG4gICAgICBlbC5wYXR0ZXJuID0gYC57JHtwYXR0ZXJuLmxlbmd0aH0sJHtcbiAgICAgICAgZHluYW1pY1BhdHRlcm4/Lmxlbmd0aCB8fCBwYXR0ZXJuLmxlbmd0aFxuICAgICAgfX1gO1xuICAgICAgbGlzdGVuZXIgPSBkeW5hbWljUGF0dGVyblxuICAgICAgICA/ICgpID0+IHtcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbWFzayhcbiAgICAgICAgICAgICAgZWwudmFsdWUsXG4gICAgICAgICAgICAgIGVsLnZhbHVlLmxlbmd0aCA8PSBwYXR0ZXJuLmxlbmd0aCA/IHBhdHRlcm4gOiBkeW5hbWljUGF0dGVyblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogKCkgPT4gKGVsLnZhbHVlID0gbWFzayhlbC52YWx1ZSwgcGF0dGVybikpO1xuICAgIH1cbiAgfVxuICBlbC52YWx1ZSAmJiBsaXN0ZW5lcigpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgbGlzdGVuZXIpO1xufTtcbiIsImltcG9ydCB7IG1hc2sgfSBmcm9tIFwiLi9tYXNrLmpzXCI7XG5pbXBvcnQgeyB1bm1hc2sgfSBmcm9tIFwiLi91bm1hc2suanNcIjtcbmltcG9ydCB7IGlucHV0IH0gZnJvbSBcIi4vaW5wdXQuanNcIjtcbmltcG9ydCB7IHByZXBhcmVNYXNrSW5wdXRzIH0gZnJvbSBcIi4vcHJlcGFyZU1hc2tJbnB1dHMuanNcIjtcbmltcG9ydCB7XG4gIHVubWFza051bWJlcixcbiAgcmV2ZXJzZU51bWJlckZvcm1hdCxcbiAgcmV2ZXJzZUN1cnJlbmN5Rm9ybWF0LFxufSBmcm9tIFwiLi91bm1hc2tOdW1iZXIuanNcIjtcbmltcG9ydCB7IGRhdGUgfSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgeyBudW1iZXIgfSBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCB7IGN1cnJlbmN5IH0gZnJvbSBcIi4vY3VycmVuY3kuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBtYXNrLFxuICB1bm1hc2ssXG4gIGlucHV0LFxuICBwcmVwYXJlTWFza0lucHV0cyxcbiAgbnVtYmVyLFxuICBjdXJyZW5jeSxcbiAgZGF0ZSxcbiAgdW5tYXNrTnVtYmVyLFxuICByZXZlcnNlTnVtYmVyRm9ybWF0LFxuICByZXZlcnNlQ3VycmVuY3lGb3JtYXQsXG59O1xuXG4vLyBpbXBvcnQubWV0YS53ZWJwYWNrSG90LmFjY2VwdCgpO1xuIiwiaW1wb3J0IHsgaW5wdXQgfSBmcm9tIFwiLi9pbnB1dC5qc1wiO1xuXG4vKipcbiAqIE1hc2sgYWxsIGlucHV0cyB3aGF0IGhhdmUgZGF0YS1pbmRleCBhdHRyaWJ1dGVcbiAqL1xuZXhwb3J0IGNvbnN0IHByZXBhcmVNYXNrSW5wdXRzID0gKCkgPT4ge1xuICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLW1hc2tdXCIpXS5mb3JFYWNoKChlbCkgPT5cbiAgICBpbnB1dChlbCwgZGF0YXNldFRvT2JqZWN0KGVsLmRhdGFzZXQubWFzaykpXG4gICk7XG59O1xuXG5jb25zdCBkYXRhc2V0VG9PYmplY3QgPSAodmFsdWUpID0+IEpTT04ucGFyc2UodmFsdWUucmVwbGFjZSgvJy9nLCAnXCInKSk7XG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ0b2tlbnMiLCJkIiwidGVzdCIsInYiLCJ0cmFuc2Zvcm0iLCJhIiwidG9Mb3dlckNhc2UiLCJBIiwidG9VcHBlckNhc2UiLCJ3IiwiVyIsInVubWFzayIsInZhbHVlIiwicGF0dGVybiIsInJlcGxhY2UiLCJzbGljZSIsImxlbmd0aCIsIm1hc2siLCJvdXRwdXQiLCJpbnB1dCIsInVubWFza2VkIiwiaSIsImlpIiwicGwiLCJ0b2tlbiIsInBhdHRlcm5DaGFyIiwiaW5wdXRDaGFyIiwidW5tYXNrTnVtYmVyIiwicmV2ZXJzZUZvcm1hdCIsInBhcnRzIiwiZ3JvdXAiLCJmaW5kIiwicGFydCIsInR5cGUiLCJkZWNpbWFsIiwicmV2ZXJzZWRWYWwiLCJyZXBsYWNlQWxsIiwiTnVtYmVyIiwiaXNOYU4iLCJOYU4iLCJudW1iZXIiLCJzdHlsZSIsIm9wdGlvbnMiLCJsb2NhbGUiLCJnZXRPcHRpb25zIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdCIsImN1cnJlbmN5VG9Mb2NhbGUiLCJNYXAiLCJjdXJyZW5jeSIsInBlcmNlbnQiLCJwYXJzZUZsb2F0IiwiZGF0ZVBhcnRzIiwiRGF0ZVRpbWVGb3JtYXQiLCJmb3JtYXRUb1BhcnRzIiwiaW5pdGlhbERhdGUiLCJkYXRlIiwidmFsdWVBcnJheSIsInNwbGl0IiwibW9udGgiLCJkYXkiLCJ5ZWFyIiwiRGF0ZSIsImVsZW1lbnQiLCJwYXR0ZXJucyIsIkFycmF5IiwiaXNBcnJheSIsIlJlZmVyZW5jZUVycm9yIiwiZWwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJFcnJvciIsInNldCIsInNvcnQiLCJiIiwiZHluYW1pY1BhdHRlcm4iLCJsaXN0ZW5lciIsInBsYWNlaG9sZGVyIiwiZ2V0RGF0ZVBhdHRlcm4iLCJmb3JFYWNoIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwibWlubGVuZ3RoIiwibWF4bGVuZ3RoIiwiZGF0ZU9iamVjdCIsImdldE1hc2tlZERhdGUiLCJ2YWx1ZU9mIiwib2xkVmFsdWUiLCJtYXNrRGF0ZSIsInNldEVsZW1lbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInByZXBhcmVNYXNrSW5wdXRzIiwicXVlcnlTZWxlY3RvckFsbCIsImRhdGFzZXQiLCJKU09OIiwicGFyc2UiLCJyZXZlcnNlTnVtYmVyRm9ybWF0IiwicmV2ZXJzZUN1cnJlbmN5Rm9ybWF0Iiwic3ltYm9sIl0sInNvdXJjZVJvb3QiOiIifQ==