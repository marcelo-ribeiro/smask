var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Z:()=>y});const r={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},a=(e,t)=>e?(e=e.replace(/\W/gi,""),t?e.slice(0,t.replace(/\W/gi,"").length):e):e,n=(e,t)=>{if(!e||!t)return"";const n=[...a(e,t)],l=[...a(t)];for(let e=0,a=t.length;e<a&&n[e];e++)r[l[e]].test(n[e])?/\W/.test(t[e])?n.splice(e,0,t[e])&&l.splice(e,0,t[e]):n.splice(e,1,r[l[e]].transform(n[e])):n.splice(e,1);return n.join("")},l=(e,t)=>{let r=e.replace(/\D/g,"");return r&&"currency"===t&&(r/=100),r||0},s=(e,t)=>{const r=t.find((e=>"group"===e.type)).value,a=t.find((e=>"decimal"===e.type)).value;let n=e.replaceAll(r,"").replace(a,".");return Number.isNaN(n)?NaN:+n},o=(e,t,{...r}={},a)=>(r={...r,...u(a||"pt-BR")[t]},new Intl.NumberFormat(a,r).format(e)),c=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),u=e=>({currency:{style:"currency",currency:c.get(e)},decimal:{},percent:{}}),p=(e,t="currency",{...r}={},a)=>o(parseFloat(e),t,r,a),m=(e,t)=>{const r=(e=>{const t="01/01/1970".replace(/\D/g,"");return(e=e.replace(/\D/g,""))+t.slice(e.length)})(e),a=n(r,t),l=i(a);return n(isNaN(l.valueOf())?e.slice(0,-1):e,t)},i=(e,t)=>{const r=(new Intl.DateTimeFormat).formatToParts(),a=e.split("/"),{month:n,day:l,year:s}={[r[0].type]:a[0],[r[2].type]:a[1],[r[4].type]:a[2]};return new Date(`${n}/${l}/${s}`)},d=(e,t)=>{if(!Array.isArray(t))throw ReferenceError("Pattern is not array");if(!t)throw ReferenceError("Missing second parameter pattern.");"string"==typeof e&&(e=document.querySelector(e));let r,[a,s]=t;switch(a){case"currency":r=()=>e.value=p(l(e.value,a),a);break;case"date":{const{mask:t,placeholder:a}=(()=>{const e=(new Intl.DateTimeFormat).formatToParts(new Date("1-1-1970"));let t="",r="";return e.forEach((({type:e,value:a})=>{new Map([["month",()=>(t+="dd")&&(r+="__")],["day",()=>(t+="dd")&&(r+="__")],["year",()=>(t+="dddd")&&(r+="____")],["literal",()=>(t+=a)&&(r+=a)]]).get(e)()})),{mask:t,placeholder:r}})();e.placeholder=a,r=()=>e.value=m(e.value,t);break}default:t.sort(((e,t)=>e.length-t.length)),e.minLength=a.length,e.maxLength=s?.length||e.minLength,e.pattern=`.{${a.length},${s?.length||a.length}}`,r=s?()=>e.value=n(e.value,e.value.length<=e.minLength?a:s):()=>e.value=n(e.value,a)}e.value&&r(),e.addEventListener("input",r)},y={mask:n,unmask:a,input:d,prepareMaskInputs:()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>{return d(e,(t=e.dataset.mask,JSON.parse(t.replace(/'/g,'"'))));var t}))},number:o,currency:p,date:i,unmaskNumber:l,reverseNumberFormat:(e,t)=>{const r=new Intl.NumberFormat(t).formatToParts(1111.1);return s(e,r)},reverseCurrencyFormat:(e,t,r)=>{const a=new Intl.NumberFormat(t,{style:"currency",currency:r}).formatToParts(1111.1),n=a.find((e=>"currency"===e.type)).value,l=e.replace(n,"");return s(l,a)}};var f=t.Z;export{f as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,