var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Z:()=>g});const r={d:{test:e=>/\d/.test(e),transform:e=>e},a:{test:e=>/[a-z]/i.test(e),transform:e=>e.toLowerCase()},A:{test:e=>/[a-z]/i.test(e),transform:e=>e.toUpperCase()},w:{test:e=>/\w/.test(e),transform:e=>e.toLowerCase()},W:{test:e=>/\w/.test(e),transform:e=>e.toUpperCase()}},n=(e,t)=>e?(e=e.replace(/\W/gi,""),t?e.slice(0,t.replace(/\W/gi,"").length):e):e,a=(e,t)=>{if(!e||!t)return"";const a=[...n(e,t)],l=[...n(t)];for(let e=0,n=t.length;e<n&&a[e];e++)r[l[e]].test(a[e])?/\W/.test(t[e])?a.splice(e,0,t[e])&&l.splice(e,0,t[e]):a.splice(e,1,r[l[e]].transform(a[e])):a.splice(e,1);return a.join("")},l=(e,t)=>{let r=e.replace(/\D/g,"");return r&&"currency"===t&&(r/=100),r||0},s=(e,t)=>{const r=t.find((e=>"group"===e.type)).value,n=t.find((e=>"decimal"===e.type)).value;let a=e.replaceAll(r,"").replace(n,".");return Number.isNaN(a)?NaN:+a},o=(e,t,{...r}={},n)=>(r={...r,...u(n||"pt-BR")[t]},new Intl.NumberFormat(n,r).format(e)),c=new Map([["en-US","USD"],["pt-BR","BRL"],["fr-CA","CAD"]]),u=e=>({currency:{style:"currency",currency:c.get(e)},decimal:{},percent:{}}),i=(e,t="currency",{...r}={},n)=>o(parseFloat(e),t,r,n),p=e=>new Intl.DateTimeFormat(e).formatToParts();console.log(p());const m="01/01/1970".replace(/\D/g,""),d=(e,t)=>{const r=e.split("/"),{month:n,day:a,year:l}={[p(t)[0].type]:r[0],[p(t)[2].type]:r[1],[p(t)[4].type]:r[2]};return new Date(`${n}/${a}/${l}`)},y=(e,t)=>{if(!Array.isArray(t))throw ReferenceError("Pattern is not array");if(!t)throw ReferenceError("Missing second parameter pattern.");"string"==typeof e&&(e=document.querySelector(e));let[r,n]=t,s=()=>{};switch(e.addEventListener("keydown",(e=>{[32,37,38,39,40].includes(e.keyCode)&&e.preventDefault()})),e.addEventListener("focus",(()=>e.setSelectionRange(-1,-1))),e.addEventListener("click",(()=>e.setSelectionRange(-1,-1))),r){case"currency":s=()=>e.value=i(l(e.value,r),r);break;case"date":{const t=(e=>{let t="";return p(void 0).forEach((({type:e,value:r})=>{"month"===e||"day"===e?t+="dd":"year"===e?t+="dddd":"literal"===e&&(t+=r)})),t})();e.minLength=e.maxLength=t.length,e.pattern=`.{${t.length},${t.length}}`,s=()=>e.value=((e,t,r)=>{const n=d(((e,t)=>a(e,t))((e=>(e=e.replace(/\D/g,""))+m.slice(e.length))(e),t),r);return a(isNaN(n.valueOf())?e.slice(0,-1):e,t)})(e.value,t);break}default:t.sort(((e,t)=>e.length-t.length)),e.minLength=r.length,e.maxLength=n?.length||e.minLength,e.pattern=`.{${r.length},${n?.length||r.length}}`,s=n?()=>e.value=a(e.value,e.value.length<=e.minLength?r:n):()=>e.value=a(e.value,r)}e.value&&s(),e.addEventListener("input",s)},g={mask:a,unmask:n,input:y,prepareMaskInputs:()=>{[...document.querySelectorAll("[data-mask]")].forEach((e=>{return y(e,(t=e.dataset.mask,JSON.parse(t.replace(/'/g,'"'))));var t}))},number:o,currency:i,date:d,unmaskNumber:l,reverseNumberFormat:(e,t)=>{const r=new Intl.NumberFormat(t).formatToParts(1111.1);return s(e,r)},reverseCurrencyFormat:(e,t,r)=>{const n=new Intl.NumberFormat(t,{style:"currency",currency:r}).formatToParts(1111.1),a=n.find((e=>"currency"===e.type)).value,l=e.replace(a,"");return s(l,n)}};var f=t.Z;export{f as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,